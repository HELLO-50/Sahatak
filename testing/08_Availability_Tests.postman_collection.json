{
	"info": {
		"name": "08 - Doctor Availability Management Tests",
		"description": "Test doctor schedule management, availability slots, time blocking, and calendar integration",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Schedule Setup & Management",
			"item": [
				{
					"name": "Create Weekly Schedule Template",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{doctor_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"template_name\": \"Standard Clinic Hours\",\n  \"timezone\": \"Africa/Khartoum\",\n  \"schedule\": {\n    \"sunday\": {\n      \"is_working_day\": true,\n      \"work_periods\": [\n        {\n          \"start_time\": \"08:00\",\n          \"end_time\": \"12:00\",\n          \"appointment_duration_minutes\": 30,\n          \"break_between_appointments_minutes\": 5\n        },\n        {\n          \"start_time\": \"14:00\",\n          \"end_time\": \"18:00\",\n          \"appointment_duration_minutes\": 30,\n          \"break_between_appointments_minutes\": 5\n        }\n      ],\n      \"lunch_break\": {\n        \"start_time\": \"12:00\",\n        \"end_time\": \"14:00\"\n      }\n    },\n    \"monday\": {\n      \"is_working_day\": true,\n      \"work_periods\": [\n        {\n          \"start_time\": \"08:00\",\n          \"end_time\": \"12:00\",\n          \"appointment_duration_minutes\": 30,\n          \"break_between_appointments_minutes\": 5\n        },\n        {\n          \"start_time\": \"14:00\",\n          \"end_time\": \"18:00\",\n          \"appointment_duration_minutes\": 30,\n          \"break_between_appointments_minutes\": 5\n        }\n      ],\n      \"lunch_break\": {\n        \"start_time\": \"12:00\",\n        \"end_time\": \"14:00\"\n      }\n    },\n    \"tuesday\": {\n      \"is_working_day\": true,\n      \"work_periods\": [\n        {\n          \"start_time\": \"08:00\",\n          \"end_time\": \"12:00\",\n          \"appointment_duration_minutes\": 30,\n          \"break_between_appointments_minutes\": 5\n        },\n        {\n          \"start_time\": \"14:00\",\n          \"end_time\": \"18:00\",\n          \"appointment_duration_minutes\": 30,\n          \"break_between_appointments_minutes\": 5\n        }\n      ]\n    },\n    \"wednesday\": {\n      \"is_working_day\": true,\n      \"work_periods\": [\n        {\n          \"start_time\": \"08:00\",\n          \"end_time\": \"12:00\",\n          \"appointment_duration_minutes\": 30,\n          \"break_between_appointments_minutes\": 5\n        },\n        {\n          \"start_time\": \"14:00\",\n          \"end_time\": \"18:00\",\n          \"appointment_duration_minutes\": 30,\n          \"break_between_appointments_minutes\": 5\n        }\n      ]\n    },\n    \"thursday\": {\n      \"is_working_day\": true,\n      \"work_periods\": [\n        {\n          \"start_time\": \"08:00\",\n          \"end_time\": \"14:00\",\n          \"appointment_duration_minutes\": 30,\n          \"break_between_appointments_minutes\": 5\n        }\n      ],\n      \"notes\": \"Half day - research and administrative work in afternoon\"\n    },\n    \"friday\": {\n      \"is_working_day\": false,\n      \"notes\": \"Weekly day off\"\n    },\n    \"saturday\": {\n      \"is_working_day\": false,\n      \"notes\": \"Weekend\"\n    }\n  },\n  \"effective_date\": \"2024-02-01\",\n  \"auto_generate_slots\": true,\n  \"allow_online_booking\": true,\n  \"advance_booking_days\": 30,\n  \"same_day_booking_cutoff_hours\": 2\n}"
						},
						"url": {
							"raw": "{{backend_url}}/availability/schedule-template",
							"host": ["{{backend_url}}"],
							"path": ["availability", "schedule-template"]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Schedule template created successfully', function () {",
									"    pm.response.to.have.status(201);",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.data).to.have.property('template_id');",
									"    pm.expect(jsonData.data).to.have.property('slots_generated');",
									"    pm.expect(jsonData.data.slots_generated).to.be.greaterThan(0);",
									"    ",
									"    // Save template ID for other tests",
									"    pm.environment.set('schedule_template_id', jsonData.data.template_id);",
									"    console.log('Schedule template ID saved:', jsonData.data.template_id);",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "Get Doctor's Schedule",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{doctor_token}}"
							}
						],
						"url": {
							"raw": "{{backend_url}}/availability/schedule?start_date=2024-02-05&end_date=2024-02-11&include_booked=true",
							"host": ["{{backend_url}}"],
							"path": ["availability", "schedule"],
							"query": [
								{
									"key": "start_date",
									"value": "2024-02-05"
								},
								{
									"key": "end_date",
									"value": "2024-02-11"
								},
								{
									"key": "include_booked",
									"value": "true"
								}
							]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Doctor schedule retrieved', function () {",
									"    pm.response.to.have.status(200);",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.data).to.have.property('schedule');",
									"    pm.expect(jsonData.data.schedule).to.be.an('array');",
									"    pm.expect(jsonData.data).to.have.property('date_range');",
									"    pm.expect(jsonData.data).to.have.property('total_slots');",
									"    pm.expect(jsonData.data).to.have.property('available_slots');",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "Update Schedule Template",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{doctor_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"template_id\": {{schedule_template_id}},\n  \"changes\": {\n    \"thursday\": {\n      \"is_working_day\": true,\n      \"work_periods\": [\n        {\n          \"start_time\": \"08:00\",\n          \"end_time\": \"12:00\",\n          \"appointment_duration_minutes\": 45,\n          \"break_between_appointments_minutes\": 10\n        },\n        {\n          \"start_time\": \"15:00\",\n          \"end_time\": \"19:00\",\n          \"appointment_duration_minutes\": 45,\n          \"break_between_appointments_minutes\": 10\n        }\n      ],\n      \"notes\": \"Extended Thursday hours with longer appointments for complex cases\"\n    },\n    \"advance_booking_days\": 45\n  },\n  \"apply_to_future_only\": true,\n  \"effective_date\": \"2024-02-15\",\n  \"regenerate_slots\": true\n}"
						},
						"url": {
							"raw": "{{backend_url}}/availability/schedule-template/{{schedule_template_id}}",
							"host": ["{{backend_url}}"],
							"path": ["availability", "schedule-template", "{{schedule_template_id}}"]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Schedule template updated successfully', function () {",
									"    pm.response.to.have.status(200);",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.data).to.have.property('updated_template_id');",
									"    pm.expect(jsonData.data).to.have.property('slots_regenerated');",
									"    pm.expect(jsonData.data.slots_regenerated).to.be.greaterThan(0);",
									"});"
								]
							}
						}
					]
				}
			]
		},
		{
			"name": "Time Slot Management",
			"item": [
				{
					"name": "Get Available Time Slots",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{patient_token}}"
							}
						],
						"url": {
							"raw": "{{backend_url}}/availability/slots/{{doctor_id}}?date=2024-02-07&appointment_type=consultation&duration_minutes=30",
							"host": ["{{backend_url}}"],
							"path": ["availability", "slots", "{{doctor_id}}"],
							"query": [
								{
									"key": "date",
									"value": "2024-02-07"
								},
								{
									"key": "appointment_type",
									"value": "consultation"
								},
								{
									"key": "duration_minutes",
									"value": "30"
								}
							]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Available time slots retrieved', function () {",
									"    pm.response.to.have.status(200);",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.data).to.have.property('available_slots');",
									"    pm.expect(jsonData.data.available_slots).to.be.an('array');",
									"    pm.expect(jsonData.data).to.have.property('date');",
									"    pm.expect(jsonData.data).to.have.property('doctor_info');",
									"    ",
									"    // Save first available slot for booking test",
									"    if (jsonData.data.available_slots.length > 0) {",
									"        pm.environment.set('available_slot_id', jsonData.data.available_slots[0].slot_id);",
									"        pm.environment.set('slot_start_time', jsonData.data.available_slots[0].start_time);",
									"        console.log('Available slot saved:', jsonData.data.available_slots[0].slot_id);",
									"    }",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "Block Time Slot (Doctor)",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{doctor_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"date\": \"2024-02-08\",\n  \"start_time\": \"10:00\",\n  \"end_time\": \"11:30\",\n  \"block_reason\": \"Medical conference attendance\",\n  \"block_type\": \"meeting\",\n  \"is_recurring\": false,\n  \"notify_patients\": true,\n  \"allow_emergency_override\": false,\n  \"notes\": \"Attending Sudan Medical Association monthly conference\"\n}"
						},
						"url": {
							"raw": "{{backend_url}}/availability/block-time",
							"host": ["{{backend_url}}"],
							"path": ["availability", "block-time"]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Time slot blocked successfully', function () {",
									"    pm.response.to.have.status(201);",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.data).to.have.property('block_id');",
									"    pm.expect(jsonData.data).to.have.property('affected_slots');",
									"    pm.expect(jsonData.data.affected_slots).to.be.greaterThan(0);",
									"    ",
									"    // Save block ID for removal test",
									"    pm.environment.set('time_block_id', jsonData.data.block_id);",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "Create Recurring Block",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{doctor_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"start_date\": \"2024-02-09\",\n  \"end_date\": \"2024-05-31\",\n  \"time_slot\": {\n    \"start_time\": \"12:00\",\n    \"end_time\": \"13:00\"\n  },\n  \"recurring_pattern\": {\n    \"frequency\": \"weekly\",\n    \"days_of_week\": [\"friday\"],\n    \"interval\": 1\n  },\n  \"block_reason\": \"Weekly administrative work\",\n  \"block_type\": \"admin\",\n  \"notify_patients\": false,\n  \"allow_emergency_override\": true,\n  \"notes\": \"Reserved for patient chart reviews, insurance processing, and administrative tasks\"\n}"
						},
						"url": {
							"raw": "{{backend_url}}/availability/block-recurring",
							"host": ["{{backend_url}}"],
							"path": ["availability", "block-recurring"]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Recurring block created successfully', function () {",
									"    pm.response.to.have.status(201);",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.data).to.have.property('recurring_block_id');",
									"    pm.expect(jsonData.data).to.have.property('total_occurrences');",
									"    pm.expect(jsonData.data.total_occurrences).to.be.greaterThan(0);",
									"    pm.expect(jsonData.data).to.have.property('affected_slots_total');",
									"    ",
									"    // Save recurring block ID",
									"    pm.environment.set('recurring_block_id', jsonData.data.recurring_block_id);",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "Get Blocked Times",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{doctor_token}}"
							}
						],
						"url": {
							"raw": "{{backend_url}}/availability/blocked-times?start_date=2024-02-01&end_date=2024-02-29&include_recurring=true",
							"host": ["{{backend_url}}"],
							"path": ["availability", "blocked-times"],
							"query": [
								{
									"key": "start_date",
									"value": "2024-02-01"
								},
								{
									"key": "end_date",
									"value": "2024-02-29"
								},
								{
									"key": "include_recurring",
									"value": "true"
								}
							]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Blocked times retrieved', function () {",
									"    pm.response.to.have.status(200);",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.data).to.have.property('blocked_times');",
									"    pm.expect(jsonData.data.blocked_times).to.be.an('array');",
									"    pm.expect(jsonData.data).to.have.property('date_range');",
									"    pm.expect(jsonData.data).to.have.property('total_blocked_hours');",
									"});"
								]
							}
						}
					]
				}
			]
		},
		{
			"name": "Patient Availability Search",
			"item": [
				{
					"name": "Search Available Doctors",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{patient_token}}"
							}
						],
						"url": {
							"raw": "{{backend_url}}/availability/search-doctors?date=2024-02-07&specialty=general&preferred_time=morning&duration_minutes=30&urgent=false",
							"host": ["{{backend_url}}"],
							"path": ["availability", "search-doctors"],
							"query": [
								{
									"key": "date",
									"value": "2024-02-07"
								},
								{
									"key": "specialty",
									"value": "general"
								},
								{
									"key": "preferred_time",
									"value": "morning"
								},
								{
									"key": "duration_minutes",
									"value": "30"
								},
								{
									"key": "urgent",
									"value": "false"
								}
							]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Available doctors found', function () {",
									"    pm.response.to.have.status(200);",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.data.available_doctors).to.be.an('array');",
									"    pm.expect(jsonData.data).to.have.property('search_criteria');",
									"    pm.expect(jsonData.data).to.have.property('total_found');",
									"    ",
									"    // Verify doctor information structure",
									"    if (jsonData.data.available_doctors.length > 0) {",
									"        var doctor = jsonData.data.available_doctors[0];",
									"        pm.expect(doctor).to.have.property('doctor_id');",
									"        pm.expect(doctor).to.have.property('name');",
									"        pm.expect(doctor).to.have.property('specialty');",
									"        pm.expect(doctor).to.have.property('available_slots');",
									"        pm.expect(doctor.available_slots).to.be.an('array');",
									"    }",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "Get Next Available Appointment",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{patient_token}}"
							}
						],
						"url": {
							"raw": "{{backend_url}}/availability/next-available/{{doctor_id}}?appointment_type=followup&preferred_days=weekdays&max_days_ahead=14",
							"host": ["{{backend_url}}"],
							"path": ["availability", "next-available", "{{doctor_id}}"],
							"query": [
								{
									"key": "appointment_type",
									"value": "followup"
								},
								{
									"key": "preferred_days",
									"value": "weekdays"
								},
								{
									"key": "max_days_ahead",
									"value": "14"
								}
							]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Next available appointment found', function () {",
									"    pm.response.to.have.status(200);",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.data).to.have.property('next_available_slot');",
									"    pm.expect(jsonData.data.next_available_slot).to.have.property('date');",
									"    pm.expect(jsonData.data.next_available_slot).to.have.property('start_time');",
									"    pm.expect(jsonData.data.next_available_slot).to.have.property('slot_id');",
									"    pm.expect(jsonData.data).to.have.property('doctor_info');",
									"    pm.expect(jsonData.data).to.have.property('days_from_now');",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "Check Multiple Date Availability",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{patient_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"doctor_id\": {{doctor_id}},\n  \"dates\": [\n    \"2024-02-07\",\n    \"2024-02-08\",\n    \"2024-02-09\",\n    \"2024-02-12\",\n    \"2024-02-13\"\n  ],\n  \"preferred_times\": [\"morning\", \"afternoon\"],\n  \"appointment_duration_minutes\": 30,\n  \"appointment_type\": \"consultation\"\n}"
						},
						"url": {
							"raw": "{{backend_url}}/availability/check-multiple-dates",
							"host": ["{{backend_url}}"],
							"path": ["availability", "check-multiple-dates"]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Multiple date availability checked', function () {",
									"    pm.response.to.have.status(200);",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.data.date_availability).to.be.an('array');",
									"    pm.expect(jsonData.data).to.have.property('summary');",
									"    ",
									"    // Verify date availability structure",
									"    jsonData.data.date_availability.forEach(function(dateAvail) {",
									"        pm.expect(dateAvail).to.have.property('date');",
									"        pm.expect(dateAvail).to.have.property('available_slots_count');",
									"        pm.expect(dateAvail).to.have.property('slots');",
									"    });",
									"});"
								]
							}
						}
					]
				}
			]
		},
		{
			"name": "Emergency & Urgent Slots",
			"item": [
				{
					"name": "Create Emergency Slot",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{doctor_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"date\": \"2024-02-07\",\n  \"start_time\": \"19:00\",\n  \"end_time\": \"20:00\",\n  \"emergency_type\": \"urgent_consultation\",\n  \"max_patients\": 3,\n  \"priority_level\": \"high\",\n  \"requires_approval\": false,\n  \"notes\": \"Emergency slots for urgent patient needs\",\n  \"contact_instructions\": \"Patients should call office directly for emergency bookings\"\n}"
						},
						"url": {
							"raw": "{{backend_url}}/availability/emergency-slot",
							"host": ["{{backend_url}}"],
							"path": ["availability", "emergency-slot"]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Emergency slot created successfully', function () {",
									"    pm.response.to.have.status(201);",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.data).to.have.property('emergency_slot_id');",
									"    pm.expect(jsonData.data).to.have.property('available_capacity');",
									"    pm.expect(jsonData.data.available_capacity).to.equal(3);",
									"    ",
									"    // Save emergency slot ID",
									"    pm.environment.set('emergency_slot_id', jsonData.data.emergency_slot_id);",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "Get Emergency Availability",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{patient_token}}"
							}
						],
						"url": {
							"raw": "{{backend_url}}/availability/emergency?specialty=general&max_wait_hours=2&location=khartoum",
							"host": ["{{backend_url}}"],
							"path": ["availability", "emergency"],
							"query": [
								{
									"key": "specialty",
									"value": "general"
								},
								{
									"key": "max_wait_hours",
									"value": "2"
								},
								{
									"key": "location",
									"value": "khartoum"
								}
							]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Emergency availability retrieved', function () {",
									"    pm.response.to.have.status(200);",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.data.emergency_slots).to.be.an('array');",
									"    pm.expect(jsonData.data).to.have.property('immediate_availability');",
									"    pm.expect(jsonData.data).to.have.property('urgent_contact_info');",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "Request Urgent Appointment",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{patient_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"doctor_id\": {{doctor_id}},\n  \"urgency_level\": \"high\",\n  \"reason\": \"Severe headache and dizziness since this morning\",\n  \"symptoms\": [\n    \"severe headache\",\n    \"dizziness\",\n    \"nausea\"\n  ],\n  \"preferred_contact_method\": \"phone\",\n  \"contact_number\": \"+249555123456\",\n  \"can_travel_immediately\": true,\n  \"insurance_information\": {\n    \"has_insurance\": true,\n    \"provider\": \"Sudan National Health Insurance\",\n    \"emergency_coverage\": true\n  },\n  \"medical_history_relevant\": \"Patient has history of migraines but this feels different\"\n}"
						},
						"url": {
							"raw": "{{backend_url}}/availability/urgent-request",
							"host": ["{{backend_url}}"],
							"path": ["availability", "urgent-request"]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Urgent appointment requested', function () {",
									"    pm.response.to.have.status(201);",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.data).to.have.property('urgent_request_id');",
									"    pm.expect(jsonData.data).to.have.property('estimated_response_time');",
									"    pm.expect(jsonData.data).to.have.property('status');",
									"    pm.expect(jsonData.data.status).to.equal('pending_review');",
									"    ",
									"    // Save urgent request ID",
									"    pm.environment.set('urgent_request_id', jsonData.data.urgent_request_id);",
									"});"
								]
							}
						}
					]
				}
			]
		},
		{
			"name": "Calendar Integration",
			"item": [
				{
					"name": "Export Schedule to Calendar",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{doctor_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"calendar_format\": \"ical\",\n  \"date_range\": {\n    \"start_date\": \"2024-02-01\",\n    \"end_date\": \"2024-02-29\"\n  },\n  \"include_types\": [\"appointments\", \"blocked_times\", \"breaks\"],\n  \"privacy_level\": \"basic\",\n  \"timezone\": \"Africa/Khartoum\",\n  \"include_patient_names\": false,\n  \"include_appointment_notes\": false,\n  \"update_frequency\": \"real_time\"\n}"
						},
						"url": {
							"raw": "{{backend_url}}/availability/calendar-export",
							"host": ["{{backend_url}}"],
							"path": ["availability", "calendar-export"]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Calendar export created', function () {",
									"    pm.response.to.have.status(201);",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.data).to.have.property('export_id');",
									"    pm.expect(jsonData.data).to.have.property('calendar_url');",
									"    pm.expect(jsonData.data).to.have.property('format');",
									"    pm.expect(jsonData.data.format).to.equal('ical');",
									"    ",
									"    // Save export ID for other tests",
									"    pm.environment.set('calendar_export_id', jsonData.data.export_id);",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "Get Calendar Feed",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{doctor_token}}"
							}
						],
						"url": {
							"raw": "{{backend_url}}/availability/calendar-feed/{{calendar_export_id}}",
							"host": ["{{backend_url}}"],
							"path": ["availability", "calendar-feed", "{{calendar_export_id}}"]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Calendar feed retrieved', function () {",
									"    pm.response.to.have.status(200);",
									"    // For iCal format, expect text/calendar content type",
									"    if (pm.response.headers.get('Content-Type')) {",
									"        pm.expect(pm.response.headers.get('Content-Type')).to.include('text/calendar');",
									"    }",
									"    ",
									"    // Check iCal format structure",
									"    var responseText = pm.response.text();",
									"    pm.expect(responseText).to.include('BEGIN:VCALENDAR');",
									"    pm.expect(responseText).to.include('END:VCALENDAR');",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "Sync External Calendar",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{doctor_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"calendar_provider\": \"google\",\n  \"calendar_id\": \"doctor.smith@gmail.com\",\n  \"sync_direction\": \"bidirectional\",\n  \"conflict_resolution\": \"manual_review\",\n  \"sync_frequency\": \"real_time\",\n  \"event_types_to_sync\": [\"appointments\", \"personal_blocks\"],\n  \"privacy_settings\": {\n    \"share_patient_names\": false,\n    \"share_appointment_details\": false,\n    \"show_as_busy_only\": true\n  },\n  \"auto_block_external_events\": true,\n  \"notification_preferences\": {\n    \"sync_conflicts\": true,\n    \"sync_success\": false,\n    \"sync_errors\": true\n  }\n}"
						},
						"url": {
							"raw": "{{backend_url}}/availability/external-calendar-sync",
							"host": ["{{backend_url}}"],
							"path": ["availability", "external-calendar-sync"]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('External calendar sync configured', function () {",
									"    pm.response.to.have.status(201);",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.data).to.have.property('sync_configuration_id');",
									"    pm.expect(jsonData.data).to.have.property('initial_sync_status');",
									"    pm.expect(jsonData.data).to.have.property('webhook_url');",
									"    ",
									"    // Save sync configuration ID",
									"    pm.environment.set('calendar_sync_id', jsonData.data.sync_configuration_id);",
									"});"
								]
							}
						}
					]
				}
			]
		},
		{
			"name": "Analytics & Reports",
			"item": [
				{
					"name": "Get Availability Analytics",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{doctor_token}}"
							}
						],
						"url": {
							"raw": "{{backend_url}}/availability/analytics?period=30days&include_utilization=true&include_patterns=true",
							"host": ["{{backend_url}}"],
							"path": ["availability", "analytics"],
							"query": [
								{
									"key": "period",
									"value": "30days"
								},
								{
									"key": "include_utilization",
									"value": "true"
								},
								{
									"key": "include_patterns",
									"value": "true"
								}
							]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Availability analytics retrieved', function () {",
									"    pm.response.to.have.status(200);",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.data).to.have.property('utilization_rate');",
									"    pm.expect(jsonData.data).to.have.property('total_available_hours');",
									"    pm.expect(jsonData.data).to.have.property('total_booked_hours');",
									"    pm.expect(jsonData.data).to.have.property('booking_patterns');",
									"    pm.expect(jsonData.data).to.have.property('peak_hours');",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "Generate Availability Report",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{doctor_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"report_type\": \"comprehensive\",\n  \"date_range\": {\n    \"start_date\": \"2024-01-01\",\n    \"end_date\": \"2024-01-31\"\n  },\n  \"include_sections\": [\n    \"schedule_overview\",\n    \"utilization_metrics\",\n    \"booking_patterns\",\n    \"blocked_time_analysis\",\n    \"patient_demand_analysis\",\n    \"revenue_impact\"\n  ],\n  \"format\": \"pdf\",\n  \"group_by\": \"week\",\n  \"compare_to_previous_period\": true,\n  \"include_recommendations\": true\n}"
						},
						"url": {
							"raw": "{{backend_url}}/availability/reports/generate",
							"host": ["{{backend_url}}"],
							"path": ["availability", "reports", "generate"]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Availability report generated', function () {",
									"    pm.response.to.have.status(201);",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.data).to.have.property('report_id');",
									"    pm.expect(jsonData.data).to.have.property('estimated_completion_time');",
									"    pm.expect(jsonData.data.status).to.equal('processing');",
									"    ",
									"    // Save report ID",
									"    pm.environment.set('availability_report_id', jsonData.data.report_id);",
									"});"
								]
							}
						}
					]
				}
			]
		},
		{
			"name": "Error Scenarios & Security",
			"item": [
				{
					"name": "Create Schedule Without Authentication",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"template_name\": \"Unauthorized Schedule\",\n  \"schedule\": {\n    \"monday\": {\n      \"is_working_day\": true,\n      \"work_periods\": []\n    }\n  }\n}"
						},
						"url": {
							"raw": "{{backend_url}}/availability/schedule-template",
							"host": ["{{backend_url}}"],
							"path": ["availability", "schedule-template"]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Unauthenticated schedule creation denied', function () {",
									"    pm.response.to.have.status(401);",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.false;",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "Patient Access Doctor Schedule Management",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{patient_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"date\": \"2024-02-10\",\n  \"start_time\": \"10:00\",\n  \"end_time\": \"11:00\",\n  \"block_reason\": \"Unauthorized block attempt\"\n}"
						},
						"url": {
							"raw": "{{backend_url}}/availability/block-time",
							"host": ["{{backend_url}}"],
							"path": ["availability", "block-time"]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Patient cannot manage doctor schedule', function () {",
									"    pm.response.to.have.status(403);",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.false;",
									"    pm.expect(jsonData.message).to.include('permission');",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "Invalid Time Format",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{doctor_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"date\": \"invalid-date\",\n  \"start_time\": \"25:00\",\n  \"end_time\": \"10:00\",\n  \"block_reason\": \"Test block\"\n}"
						},
						"url": {
							"raw": "{{backend_url}}/availability/block-time",
							"host": ["{{backend_url}}"],
							"path": ["availability", "block-time"]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Invalid time format rejected', function () {",
									"    pm.response.to.have.status(400);",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.false;",
									"    pm.expect(jsonData).to.have.property('errors');",
									"});"
								]
							}
						}
					]
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Ensure required tokens exist",
					"if (!pm.environment.get('doctor_token')) {",
					"    console.error('Doctor token not found. Please run Authentication tests first.');",
					"}",
					"",
					"if (!pm.environment.get('patient_token')) {",
					"    console.error('Patient token not found. Please run Authentication tests first.');",
					"}",
					"",
					"if (!pm.environment.get('doctor_id')) {",
					"    console.error('Doctor ID not found. Please run Authentication tests first.');",
					"}",
					"",
					"if (!pm.environment.get('patient_id')) {",
					"    console.error('Patient ID not found. Please run Authentication tests first.');",
					"}"
				]
			}
		}
	]
}