{
	"info": {
		"name": "07 - Messaging System Tests",
		"description": "Test real-time messaging, conversation management, appointment integration, and WebSocket functionality",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Conversation Management",
			"item": [
				{
					"name": "Create New Conversation",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{patient_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"recipient_id\": {{doctor_id}},\n  \"subject\": \"Post-appointment follow-up questions\",\n  \"message_content\": \"Hello Dr. Smith, I have a few questions about the medication you prescribed during my last appointment. When is the best time to take the Metformin?\",\n  \"priority\": \"normal\",\n  \"appointment_id\": {{appointment_id}},\n  \"message_type\": \"followup\",\n  \"attach_appointment_summary\": true\n}"
						},
						"url": {
							"raw": "{{backend_url}}/messages/conversations/create",
							"host": ["{{backend_url}}"],
							"path": ["messages", "conversations", "create"]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Conversation created successfully', function () {",
									"    pm.response.to.have.status(201);",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.data).to.have.property('conversation_id');",
									"    pm.expect(jsonData.data).to.have.property('message_id');",
									"    pm.expect(jsonData.data.participants).to.be.an('array');",
									"    pm.expect(jsonData.data.participants.length).to.equal(2);",
									"    ",
									"    // Save conversation ID for other tests",
									"    pm.environment.set('conversation_id', jsonData.data.conversation_id);",
									"    pm.environment.set('first_message_id', jsonData.data.message_id);",
									"    console.log('Conversation ID saved:', jsonData.data.conversation_id);",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "Get User Conversations",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{patient_token}}"
							}
						],
						"url": {
							"raw": "{{backend_url}}/messages/conversations?status=active&limit=20&include_preview=true",
							"host": ["{{backend_url}}"],
							"path": ["messages", "conversations"],
							"query": [
								{
									"key": "status",
									"value": "active"
								},
								{
									"key": "limit",
									"value": "20"
								},
								{
									"key": "include_preview",
									"value": "true"
								}
							]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('User conversations retrieved', function () {",
									"    pm.response.to.have.status(200);",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.data.conversations).to.be.an('array');",
									"    pm.expect(jsonData.data).to.have.property('total_count');",
									"    pm.expect(jsonData.data).to.have.property('unread_count');",
									"    ",
									"    // Verify conversation structure",
									"    if (jsonData.data.conversations.length > 0) {",
									"        var conv = jsonData.data.conversations[0];",
									"        pm.expect(conv).to.have.property('conversation_id');",
									"        pm.expect(conv).to.have.property('subject');",
									"        pm.expect(conv).to.have.property('last_message_preview');",
									"        pm.expect(conv).to.have.property('participants');",
									"        pm.expect(conv).to.have.property('updated_at');",
									"    }",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "Get Conversation Details",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{patient_token}}"
							}
						],
						"url": {
							"raw": "{{backend_url}}/messages/conversations/{{conversation_id}}/details",
							"host": ["{{backend_url}}"],
							"path": ["messages", "conversations", "{{conversation_id}}", "details"]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Conversation details retrieved', function () {",
									"    pm.response.to.have.status(200);",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.data).to.have.property('conversation_id');",
									"    pm.expect(jsonData.data).to.have.property('subject');",
									"    pm.expect(jsonData.data).to.have.property('participants');",
									"    pm.expect(jsonData.data).to.have.property('appointment_context');",
									"    pm.expect(jsonData.data).to.have.property('created_at');",
									"});"
								]
							}
						}
					]
				}
			]
		},
		{
			"name": "Message Operations",
			"item": [
				{
					"name": "Send Reply Message",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{doctor_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"conversation_id\": {{conversation_id}},\n  \"message_content\": \"Thank you for your question. The Metformin should be taken twice daily with meals - once with breakfast and once with dinner. This helps reduce stomach upset. Also, make sure to take it with a full glass of water. How are you feeling overall since starting the medication?\",\n  \"message_type\": \"reply\",\n  \"priority\": \"normal\",\n  \"include_medication_reminder\": true,\n  \"schedule_followup\": false\n}"
						},
						"url": {
							"raw": "{{backend_url}}/messages/send",
							"host": ["{{backend_url}}"],
							"path": ["messages", "send"]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Reply message sent successfully', function () {",
									"    pm.response.to.have.status(201);",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.data).to.have.property('message_id');",
									"    pm.expect(jsonData.data).to.have.property('conversation_id');",
									"    pm.expect(jsonData.data.status).to.equal('sent');",
									"    pm.expect(jsonData.data.delivery_status).to.equal('delivered');",
									"    ",
									"    // Save message ID for other tests",
									"    pm.environment.set('reply_message_id', jsonData.data.message_id);",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "Get Conversation Messages",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{patient_token}}"
							}
						],
						"url": {
							"raw": "{{backend_url}}/messages/conversations/{{conversation_id}}/messages?limit=50&sort=asc&include_read_status=true",
							"host": ["{{backend_url}}"],
							"path": ["messages", "conversations", "{{conversation_id}}", "messages"],
							"query": [
								{
									"key": "limit",
									"value": "50"
								},
								{
									"key": "sort",
									"value": "asc"
								},
								{
									"key": "include_read_status",
									"value": "true"
								}
							]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Conversation messages retrieved', function () {",
									"    pm.response.to.have.status(200);",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.data.messages).to.be.an('array');",
									"    pm.expect(jsonData.data.messages.length).to.be.greaterThan(0);",
									"    ",
									"    // Verify message structure",
									"    var message = jsonData.data.messages[0];",
									"    pm.expect(message).to.have.property('message_id');",
									"    pm.expect(message).to.have.property('content');",
									"    pm.expect(message).to.have.property('sender_id');",
									"    pm.expect(message).to.have.property('timestamp');",
									"    pm.expect(message).to.have.property('read_status');",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "Mark Messages as Read",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{patient_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"conversation_id\": {{conversation_id}},\n  \"message_ids\": [{{reply_message_id}}],\n  \"mark_all_as_read\": false\n}"
						},
						"url": {
							"raw": "{{backend_url}}/messages/mark-read",
							"host": ["{{backend_url}}"],
							"path": ["messages", "mark-read"]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Messages marked as read', function () {",
									"    pm.response.to.have.status(200);",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.data).to.have.property('messages_updated');",
									"    pm.expect(jsonData.data.messages_updated).to.be.greaterThan(0);",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "Search Messages",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{patient_token}}"
							}
						],
						"url": {
							"raw": "{{backend_url}}/messages/search?query=Metformin&conversation_id={{conversation_id}}&include_context=true",
							"host": ["{{backend_url}}"],
							"path": ["messages", "search"],
							"query": [
								{
									"key": "query",
									"value": "Metformin"
								},
								{
									"key": "conversation_id",
									"value": "{{conversation_id}}"
								},
								{
									"key": "include_context",
									"value": "true"
								}
							]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Message search completed', function () {",
									"    pm.response.to.have.status(200);",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.data.results).to.be.an('array');",
									"    pm.expect(jsonData.data).to.have.property('total_matches');",
									"    pm.expect(jsonData.data).to.have.property('search_query');",
									"    ",
									"    // Verify search results contain the query term",
									"    if (jsonData.data.results.length > 0) {",
									"        var result = jsonData.data.results[0];",
									"        pm.expect(result).to.have.property('message_id');",
									"        pm.expect(result).to.have.property('content');",
									"        pm.expect(result).to.have.property('highlight');",
									"    }",
									"});"
								]
							}
						}
					]
				}
			]
		},
		{
			"name": "Real-time Features Testing",
			"item": [
				{
					"name": "Send Typing Indicator",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{patient_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"conversation_id\": {{conversation_id}},\n  \"is_typing\": true,\n  \"typing_duration_seconds\": 10\n}"
						},
						"url": {
							"raw": "{{backend_url}}/messages/typing-indicator",
							"host": ["{{backend_url}}"],
							"path": ["messages", "typing-indicator"]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Typing indicator sent', function () {",
									"    pm.response.to.have.status(200);",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.data).to.have.property('typing_status');",
									"    pm.expect(jsonData.data.typing_status).to.equal('active');",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "Get Online Status",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{patient_token}}"
							}
						],
						"url": {
							"raw": "{{backend_url}}/messages/online-status/{{doctor_id}}",
							"host": ["{{backend_url}}"],
							"path": ["messages", "online-status", "{{doctor_id}}"]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Online status retrieved', function () {",
									"    pm.response.to.have.status(200);",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.data).to.have.property('user_id');",
									"    pm.expect(jsonData.data).to.have.property('online_status');",
									"    pm.expect(jsonData.data).to.have.property('last_seen');",
									"    pm.expect(['online', 'offline', 'away']).to.include(jsonData.data.online_status);",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "Update User Presence",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{patient_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"status\": \"online\",\n  \"status_message\": \"Available for messages\",\n  \"auto_away_minutes\": 15\n}"
						},
						"url": {
							"raw": "{{backend_url}}/messages/presence/update",
							"host": ["{{backend_url}}"],
							"path": ["messages", "presence", "update"]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('User presence updated', function () {",
									"    pm.response.to.have.status(200);",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.data).to.have.property('status');",
									"    pm.expect(jsonData.data.status).to.equal('online');",
									"});"
								]
							}
						}
					]
				}
			]
		},
		{
			"name": "Appointment Integration",
			"item": [
				{
					"name": "Get Appointment-Linked Conversations",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{patient_token}}"
							}
						],
						"url": {
							"raw": "{{backend_url}}/messages/appointments/{{appointment_id}}/conversations",
							"host": ["{{backend_url}}"],
							"path": ["messages", "appointments", "{{appointment_id}}", "conversations"]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Appointment-linked conversations retrieved', function () {",
									"    pm.response.to.have.status(200);",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.data).to.have.property('appointment_id');",
									"    pm.expect(jsonData.data.conversations).to.be.an('array');",
									"    pm.expect(jsonData.data).to.have.property('appointment_details');",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "Send Pre-Appointment Message",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{patient_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"recipient_id\": {{doctor_id}},\n  \"appointment_id\": {{appointment_id}},\n  \"message_content\": \"Hello Dr. Smith, I have my appointment tomorrow at 2 PM. I wanted to let you know that I've been experiencing some mild headaches in the mornings for the past week. Should I bring anything specific to discuss during our appointment?\",\n  \"message_type\": \"pre_appointment\",\n  \"priority\": \"normal\",\n  \"include_symptoms_form\": true,\n  \"symptoms\": [\n    {\n      \"symptom\": \"headache\",\n      \"severity\": \"mild\",\n      \"frequency\": \"daily_morning\",\n      \"duration_days\": 7\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{backend_url}}/messages/appointments/pre-appointment",
							"host": ["{{backend_url}}"],
							"path": ["messages", "appointments", "pre-appointment"]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Pre-appointment message sent', function () {",
									"    pm.response.to.have.status(201);",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.data).to.have.property('message_id');",
									"    pm.expect(jsonData.data).to.have.property('appointment_linked');",
									"    pm.expect(jsonData.data.appointment_linked).to.be.true;",
									"    pm.expect(jsonData.data).to.have.property('symptoms_attached');",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "Send Post-Appointment Follow-up",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{doctor_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"recipient_id\": {{patient_id}},\n  \"appointment_id\": {{appointment_id}},\n  \"message_content\": \"Thank you for coming in today. As discussed, please start taking the prescribed medication and monitor your symptoms. I've attached your prescription and care instructions. Please don't hesitate to message me if you have any questions or concerns.\",\n  \"message_type\": \"post_appointment\",\n  \"priority\": \"normal\",\n  \"include_appointment_summary\": true,\n  \"include_prescription_info\": true,\n  \"care_instructions\": [\n    \"Take Metformin 250mg twice daily with meals\",\n    \"Monitor blood sugar levels daily\",\n    \"Follow up in 2 weeks or sooner if symptoms persist\",\n    \"Contact office immediately if experiencing severe side effects\"\n  ],\n  \"follow_up_date\": \"2024-02-15\"\n}"
						},
						"url": {
							"raw": "{{backend_url}}/messages/appointments/post-appointment",
							"host": ["{{backend_url}}"],
							"path": ["messages", "appointments", "post-appointment"]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Post-appointment follow-up sent', function () {",
									"    pm.response.to.have.status(201);",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.data).to.have.property('message_id');",
									"    pm.expect(jsonData.data).to.have.property('appointment_summary_attached');",
									"    pm.expect(jsonData.data).to.have.property('care_instructions_included');",
									"    pm.expect(jsonData.data.appointment_summary_attached).to.be.true;",
									"});"
								]
							}
						}
					]
				}
			]
		},
		{
			"name": "Message Analytics & Reports",
			"item": [
				{
					"name": "Get Messaging Statistics",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{patient_token}}"
							}
						],
						"url": {
							"raw": "{{backend_url}}/messages/analytics/stats?period=30days&include_response_times=true",
							"host": ["{{backend_url}}"],
							"path": ["messages", "analytics", "stats"],
							"query": [
								{
									"key": "period",
									"value": "30days"
								},
								{
									"key": "include_response_times",
									"value": "true"
								}
							]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Messaging statistics retrieved', function () {",
									"    pm.response.to.have.status(200);",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.data).to.have.property('total_messages');",
									"    pm.expect(jsonData.data).to.have.property('conversations_count');",
									"    pm.expect(jsonData.data).to.have.property('average_response_time');",
									"    pm.expect(jsonData.data).to.have.property('message_frequency');",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "Export Conversation History",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{patient_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"conversation_ids\": [{{conversation_id}}],\n  \"export_format\": \"pdf\",\n  \"include_timestamps\": true,\n  \"include_read_status\": false,\n  \"include_participant_info\": true,\n  \"date_range\": {\n    \"start_date\": \"2024-01-01\",\n    \"end_date\": \"2024-02-28\"\n  },\n  \"purpose\": \"medical_records\"\n}"
						},
						"url": {
							"raw": "{{backend_url}}/messages/export",
							"host": ["{{backend_url}}"],
							"path": ["messages", "export"]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Conversation export initiated', function () {",
									"    pm.response.to.have.status(202);",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.data).to.have.property('export_id');",
									"    pm.expect(jsonData.data).to.have.property('estimated_completion');",
									"    pm.expect(jsonData.data.status).to.equal('processing');",
									"    ",
									"    // Save export ID for status checking",
									"    pm.environment.set('export_id', jsonData.data.export_id);",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "Check Export Status",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{patient_token}}"
							}
						],
						"url": {
							"raw": "{{backend_url}}/messages/export/{{export_id}}/status",
							"host": ["{{backend_url}}"],
							"path": ["messages", "export", "{{export_id}}", "status"]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Export status checked', function () {",
									"    pm.response.to.have.status(200);",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.data).to.have.property('export_id');",
									"    pm.expect(jsonData.data).to.have.property('status');",
									"    pm.expect(['processing', 'completed', 'failed']).to.include(jsonData.data.status);",
									"    ",
									"    if (jsonData.data.status === 'completed') {",
									"        pm.expect(jsonData.data).to.have.property('download_url');",
									"    }",
									"});"
								]
							}
						}
					]
				}
			]
		},
		{
			"name": "Security & Privacy Tests",
			"item": [
				{
					"name": "Unauthorized Conversation Access",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{admin_token}}"
							}
						],
						"url": {
							"raw": "{{backend_url}}/messages/conversations/{{conversation_id}}/messages",
							"host": ["{{backend_url}}"],
							"path": ["messages", "conversations", "{{conversation_id}}", "messages"]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Unauthorized conversation access denied', function () {",
									"    // Admin should not have access to patient-doctor conversations",
									"    pm.response.to.have.status(403);",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.false;",
									"    pm.expect(jsonData.message).to.include('access');",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "Send Message to Non-Connected User",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{patient_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"recipient_id\": 99999,\n  \"message_content\": \"This should fail - no relationship exists\",\n  \"subject\": \"Unauthorized message attempt\"\n}"
						},
						"url": {
							"raw": "{{backend_url}}/messages/conversations/create",
							"host": ["{{backend_url}}"],
							"path": ["messages", "conversations", "create"]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Message to unconnected user denied', function () {",
									"    pm.response.to.have.status(403);",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.false;",
									"    pm.expect(jsonData.message).to.include('relationship');",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "Unauthenticated Message Access",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{backend_url}}/messages/conversations",
							"host": ["{{backend_url}}"],
							"path": ["messages", "conversations"]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Unauthenticated access denied', function () {",
									"    pm.response.to.have.status(401);",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.false;",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "Invalid Message Content",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{patient_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"conversation_id\": {{conversation_id}},\n  \"message_content\": \"\",\n  \"message_type\": \"invalid_type\"\n}"
						},
						"url": {
							"raw": "{{backend_url}}/messages/send",
							"host": ["{{backend_url}}"],
							"path": ["messages", "send"]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Invalid message content rejected', function () {",
									"    pm.response.to.have.status(400);",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.false;",
									"    pm.expect(jsonData).to.have.property('errors');",
									"});"
								]
							}
						}
					]
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Ensure required tokens exist",
					"if (!pm.environment.get('patient_token')) {",
					"    console.error('Patient token not found. Please run Authentication tests first.');",
					"}",
					"",
					"if (!pm.environment.get('doctor_token')) {",
					"    console.error('Doctor token not found. Please run Authentication tests first.');",
					"}",
					"",
					"if (!pm.environment.get('patient_id')) {",
					"    console.error('Patient ID not found. Please run Authentication tests first.');",
					"}",
					"",
					"if (!pm.environment.get('doctor_id')) {",
					"    console.error('Doctor ID not found. Please run Authentication tests first.');",
					"}",
					"",
					"// Note: appointment_id is optional and may be set by appointment tests"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Global test to ensure WebSocket-related endpoints are working",
					"pm.test('Response time acceptable for messaging operations', function () {",
					"    pm.expect(pm.response.responseTime).to.be.below(5000);",
					"});",
					"",
					"// Check for proper real-time messaging headers",
					"pm.test('Proper content type for messaging API', function () {",
					"    if (pm.response.headers.get('Content-Type')) {",
					"        pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
					"    }",
					"});"
				]
			}
		}
	]
}