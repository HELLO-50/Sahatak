{
	"info": {
		"name": "11 - Admin Management Tests",
		"description": "Test admin dashboard, user management, system monitoring, and administrative controls",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "User Management",
			"item": [
				{
					"name": "Get All Users",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{admin_token}}"
							}
						],
						"url": {
							"raw": "{{backend_url}}/admin/users?page=1&limit=50&user_type=all&status=all&sort=created_desc",
							"host": ["{{backend_url}}"],
							"path": ["admin", "users"],
							"query": [
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "limit",
									"value": "50"
								},
								{
									"key": "user_type",
									"value": "all"
								},
								{
									"key": "status",
									"value": "all"
								},
								{
									"key": "sort",
									"value": "created_desc"
								}
							]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('All users retrieved successfully', function () {",
									"    pm.response.to.have.status(200);",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.data).to.have.property('users');",
									"    pm.expect(jsonData.data.users).to.be.an('array');",
									"    pm.expect(jsonData.data).to.have.property('total_count');",
									"    pm.expect(jsonData.data).to.have.property('pagination');",
									"    pm.expect(jsonData.data).to.have.property('summary');",
									"    ",
									"    // Verify user structure",
									"    if (jsonData.data.users.length > 0) {",
									"        var user = jsonData.data.users[0];",
									"        pm.expect(user).to.have.property('user_id');",
									"        pm.expect(user).to.have.property('full_name');",
									"        pm.expect(user).to.have.property('email');",
									"        pm.expect(user).to.have.property('user_type');",
									"        pm.expect(user).to.have.property('account_status');",
									"        pm.expect(user).to.have.property('created_at');",
									"    }",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "Search Users",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{admin_token}}"
							}
						],
						"url": {
							"raw": "{{backend_url}}/admin/users/search?query=sarah&search_fields=name,email&user_type=patient&limit=20",
							"host": ["{{backend_url}}"],
							"path": ["admin", "users", "search"],
							"query": [
								{
									"key": "query",
									"value": "sarah"
								},
								{
									"key": "search_fields",
									"value": "name,email"
								},
								{
									"key": "user_type",
									"value": "patient"
								},
								{
									"key": "limit",
									"value": "20"
								}
							]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('User search completed', function () {",
									"    pm.response.to.have.status(200);",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.data).to.have.property('results');",
									"    pm.expect(jsonData.data.results).to.be.an('array');",
									"    pm.expect(jsonData.data).to.have.property('total_matches');",
									"    pm.expect(jsonData.data).to.have.property('search_query');",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "Get User Details",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{admin_token}}"
							}
						],
						"url": {
							"raw": "{{backend_url}}/admin/users/{{patient_id}}/details",
							"host": ["{{backend_url}}"],
							"path": ["admin", "users", "{{patient_id}}", "details"]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('User details retrieved', function () {",
									"    pm.response.to.have.status(200);",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.data).to.have.property('user_info');",
									"    pm.expect(jsonData.data).to.have.property('account_history');",
									"    pm.expect(jsonData.data).to.have.property('activity_summary');",
									"    pm.expect(jsonData.data).to.have.property('security_info');",
									"    pm.expect(jsonData.data).to.have.property('preferences');",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "Update User Status",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{admin_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"user_id\": {{patient_id}},\n  \"new_status\": \"active\",\n  \"reason\": \"Administrative review completed\",\n  \"notes\": \"User account has been reviewed and approved for full access\",\n  \"notify_user\": true,\n  \"effective_date\": \"2024-02-07T12:00:00Z\"\n}"
						},
						"url": {
							"raw": "{{backend_url}}/admin/users/{{patient_id}}/status",
							"host": ["{{backend_url}}"],
							"path": ["admin", "users", "{{patient_id}}", "status"]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('User status updated', function () {",
									"    pm.response.to.have.status(200);",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.data).to.have.property('user_id');",
									"    pm.expect(jsonData.data).to.have.property('previous_status');",
									"    pm.expect(jsonData.data).to.have.property('new_status');",
									"    pm.expect(jsonData.data.new_status).to.equal('active');",
									"    pm.expect(jsonData.data).to.have.property('user_notified');",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "Reset User Password",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{admin_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"user_id\": {{patient_id}},\n  \"reset_type\": \"generate_temporary\",\n  \"temporary_password_length\": 12,\n  \"force_change_on_login\": true,\n  \"notify_user\": {\n    \"send_email\": true,\n    \"send_sms\": false\n  },\n  \"reason\": \"User requested password reset through admin support\",\n  \"expires_in_hours\": 24\n}"
						},
						"url": {
							"raw": "{{backend_url}}/admin/users/{{patient_id}}/reset-password",
							"host": ["{{backend_url}}"],
							"path": ["admin", "users", "{{patient_id}}", "reset-password"]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('User password reset initiated', function () {",
									"    pm.response.to.have.status(200);",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.data).to.have.property('reset_initiated');",
									"    pm.expect(jsonData.data.reset_initiated).to.be.true;",
									"    pm.expect(jsonData.data).to.have.property('temporary_password_sent');",
									"    pm.expect(jsonData.data).to.have.property('expires_at');",
									"    pm.expect(jsonData.data).to.have.property('reset_token_id');",
									"});"
								]
							}
						}
					]
				}
			]
		},
		{
			"name": "Doctor Verification Management",
			"item": [
				{
					"name": "Get Pending Verifications",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{admin_token}}"
							}
						],
						"url": {
							"raw": "{{backend_url}}/admin/doctor-verification/pending?limit=20&sort=submitted_asc",
							"host": ["{{backend_url}}"],
							"path": ["admin", "doctor-verification", "pending"],
							"query": [
								{
									"key": "limit",
									"value": "20"
								},
								{
									"key": "sort",
									"value": "submitted_asc"
								}
							]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Pending verifications retrieved', function () {",
									"    pm.response.to.have.status(200);",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.data).to.have.property('pending_doctors');",
									"    pm.expect(jsonData.data.pending_doctors).to.be.an('array');",
									"    pm.expect(jsonData.data).to.have.property('total_pending');",
									"    pm.expect(jsonData.data).to.have.property('average_processing_time');",
									"    ",
									"    // Save first doctor ID for verification tests",
									"    if (jsonData.data.pending_doctors.length > 0) {",
									"        pm.environment.set('pending_doctor_id', jsonData.data.pending_doctors[0].doctor_id);",
									"        console.log('Pending doctor ID saved:', jsonData.data.pending_doctors[0].doctor_id);",
									"    }",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "Get Doctor Verification Details",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{admin_token}}"
							}
						],
						"url": {
							"raw": "{{backend_url}}/admin/doctor-verification/{{doctor_id}}/details",
							"host": ["{{backend_url}}"],
							"path": ["admin", "doctor-verification", "{{doctor_id}}", "details"]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Doctor verification details retrieved', function () {",
									"    pm.response.to.have.status(200);",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.data).to.have.property('doctor_info');",
									"    pm.expect(jsonData.data).to.have.property('credentials');",
									"    pm.expect(jsonData.data).to.have.property('verification_history');",
									"    pm.expect(jsonData.data).to.have.property('uploaded_documents');",
									"    pm.expect(jsonData.data).to.have.property('verification_checklist');",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "Approve Doctor Verification",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{admin_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"doctor_id\": {{doctor_id}},\n  \"verification_decision\": \"approved\",\n  \"verified_credentials\": {\n    \"medical_license_verified\": true,\n    \"education_verified\": true,\n    \"specialization_verified\": true,\n    \"professional_references_verified\": true,\n    \"background_check_completed\": true\n  },\n  \"verification_notes\": \"All credentials verified successfully. Doctor has excellent references and proper qualifications.\",\n  \"granted_permissions\": {\n    \"prescribe_medications\": true,\n    \"access_patient_records\": true,\n    \"schedule_appointments\": true,\n    \"telemedicine_consultations\": true,\n    \"emergency_consultations\": true\n  },\n  \"verification_level\": \"full\",\n  \"expiry_date\": \"2025-02-07\",\n  \"notify_doctor\": true,\n  \"welcome_message\": \"Welcome to Sahatak! Your verification has been approved and you can now start seeing patients.\"\n}"
						},
						"url": {
							"raw": "{{backend_url}}/admin/doctor-verification/approve",
							"host": ["{{backend_url}}"],
							"path": ["admin", "doctor-verification", "approve"]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Doctor verification approved', function () {",
									"    pm.response.to.have.status(200);",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.data).to.have.property('doctor_id');",
									"    pm.expect(jsonData.data).to.have.property('verification_status');",
									"    pm.expect(jsonData.data.verification_status).to.equal('approved');",
									"    pm.expect(jsonData.data).to.have.property('approved_at');",
									"    pm.expect(jsonData.data).to.have.property('doctor_notified');",
									"    pm.expect(jsonData.data.doctor_notified).to.be.true;",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "Reject Doctor Verification",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{admin_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"doctor_id\": 99999,\n  \"verification_decision\": \"rejected\",\n  \"rejection_reasons\": [\n    \"incomplete_medical_license_information\",\n    \"unable_to_verify_education_credentials\"\n  ],\n  \"detailed_feedback\": \"The medical license information provided could not be verified with the licensing board. Additionally, the education credentials require additional documentation for verification.\",\n  \"required_actions\": [\n    \"Provide valid medical license number and issuing authority\",\n    \"Submit official transcripts or degree certificates\",\n    \"Provide contact information for professional references\"\n  ],\n  \"resubmission_allowed\": true,\n  \"resubmission_deadline\": \"2024-03-07\",\n  \"notify_doctor\": true,\n  \"support_contact\": \"verification@sahatak.com\"\n}"
						},
						"url": {
							"raw": "{{backend_url}}/admin/doctor-verification/reject",
							"host": ["{{backend_url}}"],
							"path": ["admin", "doctor-verification", "reject"]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Doctor verification rejection handled', function () {",
									"    // May succeed for test data or fail if doctor doesn't exist",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 404]);",
									"    var jsonData = pm.response.json();",
									"    ",
									"    if (pm.response.code === 200) {",
									"        pm.expect(jsonData.success).to.be.true;",
									"        pm.expect(jsonData.data).to.have.property('verification_status');",
									"        pm.expect(jsonData.data.verification_status).to.equal('rejected');",
									"        pm.expect(jsonData.data).to.have.property('resubmission_allowed');",
									"    } else {",
									"        pm.expect(jsonData.success).to.be.false;",
									"    }",
									"});"
								]
							}
						}
					]
				}
			]
		},
		{
			"name": "System Monitoring",
			"item": [
				{
					"name": "Get System Dashboard",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{admin_token}}"
							}
						],
						"url": {
							"raw": "{{backend_url}}/admin/dashboard?period=24hours&include_charts=true",
							"host": ["{{backend_url}}"],
							"path": ["admin", "dashboard"],
							"query": [
								{
									"key": "period",
									"value": "24hours"
								},
								{
									"key": "include_charts",
									"value": "true"
								}
							]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('System dashboard data retrieved', function () {",
									"    pm.response.to.have.status(200);",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.data).to.have.property('user_statistics');",
									"    pm.expect(jsonData.data).to.have.property('appointment_statistics');",
									"    pm.expect(jsonData.data).to.have.property('system_health');",
									"    pm.expect(jsonData.data).to.have.property('recent_activities');",
									"    pm.expect(jsonData.data).to.have.property('performance_metrics');",
									"    ",
									"    // Verify key metrics structure",
									"    pm.expect(jsonData.data.user_statistics).to.have.property('total_users');",
									"    pm.expect(jsonData.data.user_statistics).to.have.property('active_users');",
									"    pm.expect(jsonData.data.user_statistics).to.have.property('new_registrations');",
									"    pm.expect(jsonData.data.system_health).to.have.property('status');",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "Get System Health Status",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{admin_token}}"
							}
						],
						"url": {
							"raw": "{{backend_url}}/admin/system/health",
							"host": ["{{backend_url}}"],
							"path": ["admin", "system", "health"]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('System health status retrieved', function () {",
									"    pm.response.to.have.status(200);",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.data).to.have.property('overall_status');",
									"    pm.expect(jsonData.data).to.have.property('database_status');",
									"    pm.expect(jsonData.data).to.have.property('api_endpoints_status');",
									"    pm.expect(jsonData.data).to.have.property('external_services');",
									"    pm.expect(jsonData.data).to.have.property('resource_usage');",
									"    pm.expect(jsonData.data).to.have.property('last_updated');",
									"    ",
									"    // Verify status values",
									"    pm.expect(['healthy', 'warning', 'critical']).to.include(jsonData.data.overall_status);",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "Get Activity Logs",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{admin_token}}"
							}
						],
						"url": {
							"raw": "{{backend_url}}/admin/logs/activities?limit=100&level=all&start_date=2024-02-01&end_date=2024-02-07&category=admin_actions",
							"host": ["{{backend_url}}"],
							"path": ["admin", "logs", "activities"],
							"query": [
								{
									"key": "limit",
									"value": "100"
								},
								{
									"key": "level",
									"value": "all"
								},
								{
									"key": "start_date",
									"value": "2024-02-01"
								},
								{
									"key": "end_date",
									"value": "2024-02-07"
								},
								{
									"key": "category",
									"value": "admin_actions"
								}
							]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Activity logs retrieved', function () {",
									"    pm.response.to.have.status(200);",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.data).to.have.property('logs');",
									"    pm.expect(jsonData.data.logs).to.be.an('array');",
									"    pm.expect(jsonData.data).to.have.property('total_count');",
									"    pm.expect(jsonData.data).to.have.property('date_range');",
									"    pm.expect(jsonData.data).to.have.property('summary');",
									"    ",
									"    // Verify log entry structure",
									"    if (jsonData.data.logs.length > 0) {",
									"        var log = jsonData.data.logs[0];",
									"        pm.expect(log).to.have.property('timestamp');",
									"        pm.expect(log).to.have.property('level');",
									"        pm.expect(log).to.have.property('category');",
									"        pm.expect(log).to.have.property('action');",
									"        pm.expect(log).to.have.property('user_id');",
									"        pm.expect(log).to.have.property('ip_address');",
									"    }",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "Get Error Logs",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{admin_token}}"
							}
						],
						"url": {
							"raw": "{{backend_url}}/admin/logs/errors?limit=50&severity=error,critical&last_24_hours=true",
							"host": ["{{backend_url}}"],
							"path": ["admin", "logs", "errors"],
							"query": [
								{
									"key": "limit",
									"value": "50"
								},
								{
									"key": "severity",
									"value": "error,critical"
								},
								{
									"key": "last_24_hours",
									"value": "true"
								}
							]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Error logs retrieved', function () {",
									"    pm.response.to.have.status(200);",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.data).to.have.property('errors');",
									"    pm.expect(jsonData.data.errors).to.be.an('array');",
									"    pm.expect(jsonData.data).to.have.property('error_summary');",
									"    pm.expect(jsonData.data).to.have.property('most_common_errors');",
									"    ",
									"    // Verify error structure",
									"    if (jsonData.data.errors.length > 0) {",
									"        var error = jsonData.data.errors[0];",
									"        pm.expect(error).to.have.property('timestamp');",
									"        pm.expect(error).to.have.property('severity');",
									"        pm.expect(error).to.have.property('message');",
									"        pm.expect(error).to.have.property('endpoint');",
									"        pm.expect(error).to.have.property('user_agent');",
									"    }",
									"});"
								]
							}
						}
					]
				}
			]
		},
		{
			"name": "System Configuration",
			"item": [
				{
					"name": "Get System Settings",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{admin_token}}"
							}
						],
						"url": {
							"raw": "{{backend_url}}/admin/system/settings",
							"host": ["{{backend_url}}"],
							"path": ["admin", "system", "settings"]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('System settings retrieved', function () {",
									"    pm.response.to.have.status(200);",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.data).to.have.property('general_settings');",
									"    pm.expect(jsonData.data).to.have.property('security_settings');",
									"    pm.expect(jsonData.data).to.have.property('notification_settings');",
									"    pm.expect(jsonData.data).to.have.property('feature_flags');",
									"    pm.expect(jsonData.data).to.have.property('integration_settings');",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "Update System Settings",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{admin_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"general_settings\": {\n    \"system_name\": \"Sahatak Healthcare Platform\",\n    \"default_language\": \"en\",\n    \"default_timezone\": \"Africa/Khartoum\",\n    \"maintenance_mode\": false,\n    \"registration_enabled\": true,\n    \"max_file_upload_size_mb\": 10\n  },\n  \"security_settings\": {\n    \"password_policy\": {\n      \"min_length\": 8,\n      \"require_uppercase\": true,\n      \"require_lowercase\": true,\n      \"require_numbers\": true,\n      \"require_special_chars\": true,\n      \"max_age_days\": 90\n    },\n    \"session_settings\": {\n      \"timeout_minutes\": 120,\n      \"max_concurrent_sessions\": 3,\n      \"secure_cookies\": true\n    },\n    \"rate_limiting\": {\n      \"api_requests_per_minute\": 100,\n      \"login_attempts_per_hour\": 10\n    }\n  },\n  \"notification_settings\": {\n    \"email_notifications\": {\n      \"enabled\": true,\n      \"smtp_server\": \"smtp.sahatak.com\",\n      \"from_address\": \"noreply@sahatak.com\"\n    },\n    \"sms_notifications\": {\n      \"enabled\": true,\n      \"provider\": \"twilio\",\n      \"sender_id\": \"Sahatak\"\n    }\n  },\n  \"feature_flags\": {\n    \"telemedicine_enabled\": true,\n    \"ai_assessment_enabled\": false,\n    \"prescription_digital_signing\": true,\n    \"appointment_reminders\": true,\n    \"lab_results_integration\": true\n  }\n}"
						},
						"url": {
							"raw": "{{backend_url}}/admin/system/settings",
							"host": ["{{backend_url}}"],
							"path": ["admin", "system", "settings"]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('System settings updated', function () {",
									"    pm.response.to.have.status(200);",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.data).to.have.property('updated_settings');",
									"    pm.expect(jsonData.data).to.have.property('settings_applied');",
									"    pm.expect(jsonData.data.settings_applied).to.be.true;",
									"    pm.expect(jsonData.data).to.have.property('restart_required');",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "Toggle Maintenance Mode",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{admin_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"maintenance_mode\": true,\n  \"scheduled_start\": \"2024-02-10T02:00:00Z\",\n  \"estimated_duration_hours\": 2,\n  \"maintenance_message\": \"System maintenance in progress. We'll be back shortly. Thank you for your patience.\",\n  \"allowed_admin_access\": true,\n  \"notify_users\": true,\n  \"affected_services\": [\"all\"]\n}"
						},
						"url": {
							"raw": "{{backend_url}}/admin/system/maintenance",
							"host": ["{{backend_url}}"],
							"path": ["admin", "system", "maintenance"]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Maintenance mode configured', function () {",
									"    pm.response.to.have.status(200);",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.data).to.have.property('maintenance_mode');",
									"    pm.expect(jsonData.data).to.have.property('scheduled_maintenance');",
									"    pm.expect(jsonData.data).to.have.property('users_notified');",
									"});"
								]
							}
						}
					]
				}
			]
		},
		{
			"name": "Reports & Analytics",
			"item": [
				{
					"name": "Generate User Analytics Report",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{admin_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"report_type\": \"user_analytics\",\n  \"date_range\": {\n    \"start_date\": \"2024-01-01\",\n    \"end_date\": \"2024-01-31\"\n  },\n  \"metrics\": [\n    \"user_registration_trends\",\n    \"user_activity_patterns\",\n    \"user_type_distribution\",\n    \"geographic_distribution\",\n    \"engagement_metrics\",\n    \"retention_analysis\"\n  ],\n  \"group_by\": [\"week\", \"user_type\"],\n  \"format\": \"pdf\",\n  \"include_charts\": true,\n  \"include_recommendations\": true,\n  \"filters\": {\n    \"user_types\": [\"patient\", \"doctor\"],\n    \"exclude_test_accounts\": true,\n    \"min_activity_days\": 1\n  }\n}"
						},
						"url": {
							"raw": "{{backend_url}}/admin/reports/generate",
							"host": ["{{backend_url}}"],
							"path": ["admin", "reports", "generate"]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('User analytics report generated', function () {",
									"    pm.response.to.have.status(202);",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.data).to.have.property('report_id');",
									"    pm.expect(jsonData.data).to.have.property('estimated_completion_time');",
									"    pm.expect(jsonData.data.status).to.equal('processing');",
									"    ",
									"    // Save report ID",
									"    pm.environment.set('admin_report_id', jsonData.data.report_id);",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "Get System Statistics",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{admin_token}}"
							}
						],
						"url": {
							"raw": "{{backend_url}}/admin/statistics?period=30days&include_trends=true",
							"host": ["{{backend_url}}"],
							"path": ["admin", "statistics"],
							"query": [
								{
									"key": "period",
									"value": "30days"
								},
								{
									"key": "include_trends",
									"value": "true"
								}
							]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('System statistics retrieved', function () {",
									"    pm.response.to.have.status(200);",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.data).to.have.property('users');",
									"    pm.expect(jsonData.data).to.have.property('appointments');",
									"    pm.expect(jsonData.data).to.have.property('prescriptions');",
									"    pm.expect(jsonData.data).to.have.property('messages');",
									"    pm.expect(jsonData.data).to.have.property('system_usage');",
									"    pm.expect(jsonData.data).to.have.property('trends');",
									"    ",
									"    // Verify statistics structure",
									"    pm.expect(jsonData.data.users).to.have.property('total');",
									"    pm.expect(jsonData.data.users).to.have.property('active');",
									"    pm.expect(jsonData.data.users).to.have.property('new_registrations');",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "Export System Data",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{admin_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"export_type\": \"system_backup\",\n  \"data_categories\": [\n    \"user_accounts\",\n    \"appointments\",\n    \"prescriptions\",\n    \"system_logs\",\n    \"configuration_settings\"\n  ],\n  \"format\": \"json\",\n  \"compression\": \"zip\",\n  \"encryption\": {\n    \"enabled\": true,\n    \"algorithm\": \"AES-256\"\n  },\n  \"date_range\": {\n    \"start_date\": \"2024-01-01\",\n    \"end_date\": \"2024-02-07\"\n  },\n  \"exclude_sensitive_data\": {\n    \"passwords\": true,\n    \"payment_info\": true,\n    \"social_security_numbers\": true\n  },\n  \"purpose\": \"regular_backup\",\n  \"retention_days\": 90\n}"
						},
						"url": {
							"raw": "{{backend_url}}/admin/data/export",
							"host": ["{{backend_url}}"],
							"path": ["admin", "data", "export"]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('System data export initiated', function () {",
									"    pm.response.to.have.status(202);",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.data).to.have.property('export_id');",
									"    pm.expect(jsonData.data).to.have.property('estimated_completion_time');",
									"    pm.expect(jsonData.data).to.have.property('security_measures');",
									"    pm.expect(jsonData.data.status).to.equal('processing');",
									"    ",
									"    // Save export ID",
									"    pm.environment.set('system_export_id', jsonData.data.export_id);",
									"});"
								]
							}
						}
					]
				}
			]
		},
		{
			"name": "Error Scenarios & Security",
			"item": [
				{
					"name": "Access Admin Panel Without Admin Token",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{patient_token}}"
							}
						],
						"url": {
							"raw": "{{backend_url}}/admin/dashboard",
							"host": ["{{backend_url}}"],
							"path": ["admin", "dashboard"]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Non-admin access denied', function () {",
									"    pm.response.to.have.status(403);",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.false;",
									"    pm.expect(jsonData.message).to.include('admin');",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "Unauthenticated Admin Access",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{backend_url}}/admin/users",
							"host": ["{{backend_url}}"],
							"path": ["admin", "users"]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Unauthenticated admin access denied', function () {",
									"    pm.response.to.have.status(401);",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.false;",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "Invalid System Configuration",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{admin_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"general_settings\": {\n    \"max_file_upload_size_mb\": -1,\n    \"default_timezone\": \"Invalid/Timezone\"\n  },\n  \"security_settings\": {\n    \"password_policy\": {\n      \"min_length\": -5,\n      \"max_age_days\": \"invalid_number\"\n    }\n  }\n}"
						},
						"url": {
							"raw": "{{backend_url}}/admin/system/settings",
							"host": ["{{backend_url}}"],
							"path": ["admin", "system", "settings"]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Invalid system configuration rejected', function () {",
									"    pm.response.to.have.status(400);",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.false;",
									"    pm.expect(jsonData).to.have.property('errors');",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "Bulk User Operation with Invalid Data",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{admin_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operation\": \"update_status\",\n  \"user_ids\": [\"invalid_id\", 99999, \"\"],\n  \"new_status\": \"invalid_status\",\n  \"reason\": \"\"\n}"
						},
						"url": {
							"raw": "{{backend_url}}/admin/users/bulk-update",
							"host": ["{{backend_url}}"],
							"path": ["admin", "users", "bulk-update"]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Invalid bulk operation rejected', function () {",
									"    pm.response.to.have.status(400);",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.false;",
									"    pm.expect(jsonData).to.have.property('errors');",
									"});"
								]
							}
						}
					]
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Ensure admin token exists",
					"if (!pm.environment.get('admin_token')) {",
					"    console.error('Admin token not found. Please run Authentication tests first.');",
					"}",
					"",
					"// Ensure other tokens exist for cross-role testing",
					"if (!pm.environment.get('patient_token')) {",
					"    console.error('Patient token not found. Please run Authentication tests first.');",
					"}",
					"",
					"if (!pm.environment.get('doctor_token')) {",
					"    console.error('Doctor token not found. Please run Authentication tests first.');",
					"}",
					"",
					"// Ensure user IDs exist",
					"if (!pm.environment.get('patient_id')) {",
					"    console.error('Patient ID not found. Please run Authentication tests first.');",
					"}",
					"",
					"if (!pm.environment.get('doctor_id')) {",
					"    console.error('Doctor ID not found. Please run Authentication tests first.');",
					"}"
				]
			}
		}
	]
}