{
	"info": {
		"name": "06 - Prescriptions Management Tests",
		"description": "Test prescription creation, management, patient access, and pharmacy integration",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Doctor Prescription Management",
			"item": [
				{
					"name": "Create New Prescription",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{doctor_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"patient_id\": {{patient_id}},\n  \"appointment_id\": {{appointment_id}},\n  \"diagnosis_code\": \"E11.9\",\n  \"diagnosis_description\": \"Type 2 diabetes mellitus without complications\",\n  \"medications\": [\n    {\n      \"name\": \"Metformin\",\n      \"generic_name\": \"Metformin Hydrochloride\",\n      \"strength\": \"500mg\",\n      \"dosage_form\": \"tablet\",\n      \"quantity\": 90,\n      \"directions\": \"Take one tablet twice daily with meals\",\n      \"duration_days\": 30,\n      \"refills_allowed\": 5,\n      \"substitution_allowed\": true,\n      \"priority\": \"routine\"\n    },\n    {\n      \"name\": \"Lisinopril\",\n      \"generic_name\": \"Lisinopril\",\n      \"strength\": \"10mg\",\n      \"dosage_form\": \"tablet\",\n      \"quantity\": 30,\n      \"directions\": \"Take one tablet once daily in the morning\",\n      \"duration_days\": 30,\n      \"refills_allowed\": 5,\n      \"substitution_allowed\": true,\n      \"priority\": \"routine\"\n    }\n  ],\n  \"pharmacy_instructions\": \"Please counsel patient on medication timing and potential side effects\",\n  \"patient_instructions\": \"Take medications as directed. Monitor blood sugar levels daily. Contact office if experiencing nausea or unusual symptoms.\",\n  \"follow_up_required\": true,\n  \"follow_up_days\": 30,\n  \"electronic_signature\": true,\n  \"prescriber_notes\": \"Patient responding well to current treatment plan. Continue monitoring HbA1c levels.\"\n}"
						},
						"url": {
							"raw": "{{backend_url}}/prescriptions/create",
							"host": ["{{backend_url}}"],
							"path": ["prescriptions", "create"]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Prescription created successfully', function () {",
									"    pm.response.to.have.status(201);",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.data).to.have.property('prescription_id');",
									"    pm.expect(jsonData.data).to.have.property('prescription_number');",
									"    pm.expect(jsonData.data.medications).to.be.an('array');",
									"    ",
									"    // Save for other tests",
									"    pm.environment.set('prescription_id', jsonData.data.prescription_id);",
									"    pm.environment.set('prescription_number', jsonData.data.prescription_number);",
									"    console.log('Prescription ID saved:', jsonData.data.prescription_id);",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "Get Doctor's Prescriptions",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{doctor_token}}"
							}
						],
						"url": {
							"raw": "{{backend_url}}/prescriptions/doctor/list?status=active&limit=20&sort=date_desc",
							"host": ["{{backend_url}}"],
							"path": ["prescriptions", "doctor", "list"],
							"query": [
								{
									"key": "status",
									"value": "active"
								},
								{
									"key": "limit",
									"value": "20"
								},
								{
									"key": "sort",
									"value": "date_desc"
								}
							]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Doctor prescriptions retrieved', function () {",
									"    pm.response.to.have.status(200);",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.data.prescriptions).to.be.an('array');",
									"    pm.expect(jsonData.data).to.have.property('total_count');",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "Update Prescription Status",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{doctor_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"status\": \"modified\",\n  \"modification_reason\": \"Patient reported mild side effects, adjusting dosage\",\n  \"medication_changes\": [\n    {\n      \"medication_name\": \"Metformin\",\n      \"change_type\": \"dosage_adjustment\",\n      \"old_strength\": \"500mg\",\n      \"new_strength\": \"250mg\",\n      \"old_directions\": \"Take one tablet twice daily with meals\",\n      \"new_directions\": \"Take one tablet twice daily with meals, may increase to 500mg after 1 week if tolerated\",\n      \"reason\": \"Reduce initial dosage to minimize gastrointestinal side effects\"\n    }\n  ],\n  \"notes\": \"Patient counseled on gradual dose increase protocol\"\n}"
						},
						"url": {
							"raw": "{{backend_url}}/prescriptions/{{prescription_id}}/update",
							"host": ["{{backend_url}}"],
							"path": ["prescriptions", "{{prescription_id}}", "update"]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Prescription updated successfully', function () {",
									"    pm.response.to.have.status(200);",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.data).to.have.property('modification_id');",
									"    pm.expect(jsonData.data.status).to.equal('modified');",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "Add Prescription Renewal",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{doctor_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"original_prescription_id\": {{prescription_id}},\n  \"patient_id\": {{patient_id}},\n  \"renewal_reason\": \"Patient responding well to treatment, continue therapy\",\n  \"medication_renewals\": [\n    {\n      \"medication_name\": \"Metformin\",\n      \"continue_current_dosage\": true,\n      \"quantity\": 90,\n      \"refills_allowed\": 5,\n      \"duration_days\": 90\n    },\n    {\n      \"medication_name\": \"Lisinopril\",\n      \"continue_current_dosage\": true,\n      \"quantity\": 90,\n      \"refills_allowed\": 5,\n      \"duration_days\": 90\n    }\n  ],\n  \"lab_results_reviewed\": true,\n  \"next_review_date\": \"2024-04-15\",\n  \"patient_compliance\": \"good\",\n  \"side_effects_reported\": \"none\",\n  \"notes\": \"HbA1c improved to 7.2%. Blood pressure well controlled. Continue current regimen.\"\n}"
						},
						"url": {
							"raw": "{{backend_url}}/prescriptions/renew",
							"host": ["{{backend_url}}"],
							"path": ["prescriptions", "renew"]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Prescription renewed successfully', function () {",
									"    pm.response.to.have.status(201);",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.data).to.have.property('renewal_prescription_id');",
									"    pm.expect(jsonData.data.status).to.equal('active');",
									"    ",
									"    // Save renewal ID",
									"    pm.environment.set('renewal_prescription_id', jsonData.data.renewal_prescription_id);",
									"});"
								]
							}
						}
					]
				}
			]
		},
		{
			"name": "Patient Prescription Access",
			"item": [
				{
					"name": "Get Patient's Prescriptions",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{patient_token}}"
							}
						],
						"url": {
							"raw": "{{backend_url}}/prescriptions/patient/list?status=all&include_history=true",
							"host": ["{{backend_url}}"],
							"path": ["prescriptions", "patient", "list"],
							"query": [
								{
									"key": "status",
									"value": "all"
								},
								{
									"key": "include_history",
									"value": "true"
								}
							]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Patient prescriptions retrieved', function () {",
									"    pm.response.to.have.status(200);",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.data.prescriptions).to.be.an('array');",
									"    pm.expect(jsonData.data).to.have.property('active_count');",
									"    pm.expect(jsonData.data).to.have.property('total_count');",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "Get Specific Prescription Details",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{patient_token}}"
							}
						],
						"url": {
							"raw": "{{backend_url}}/prescriptions/{{prescription_id}}/details",
							"host": ["{{backend_url}}"],
							"path": ["prescriptions", "{{prescription_id}}", "details"]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Prescription details retrieved', function () {",
									"    pm.response.to.have.status(200);",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.data).to.have.property('prescription_number');",
									"    pm.expect(jsonData.data).to.have.property('medications');",
									"    pm.expect(jsonData.data).to.have.property('prescribing_doctor');",
									"    pm.expect(jsonData.data).to.have.property('patient_instructions');",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "Request Prescription Refill",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{patient_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"prescription_id\": {{prescription_id}},\n  \"medications_to_refill\": [\n    {\n      \"medication_name\": \"Metformin\",\n      \"current_supply_days\": 3,\n      \"preferred_pharmacy\": \"Khartoum Central Pharmacy\",\n      \"urgent\": false\n    },\n    {\n      \"medication_name\": \"Lisinopril\",\n      \"current_supply_days\": 5,\n      \"preferred_pharmacy\": \"Khartoum Central Pharmacy\",\n      \"urgent\": false\n    }\n  ],\n  \"preferred_pickup_date\": \"2024-02-05\",\n  \"insurance_changed\": false,\n  \"contact_method\": \"sms\",\n  \"notes\": \"Patient compliant with current medications, no side effects reported\"\n}"
						},
						"url": {
							"raw": "{{backend_url}}/prescriptions/refill-request",
							"host": ["{{backend_url}}"],
							"path": ["prescriptions", "refill-request"]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Refill request submitted successfully', function () {",
									"    pm.response.to.have.status(201);",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.data).to.have.property('refill_request_id');",
									"    pm.expect(jsonData.data.status).to.equal('pending_approval');",
									"    ",
									"    // Save refill request ID",
									"    pm.environment.set('refill_request_id', jsonData.data.refill_request_id);",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "Get Medication Adherence Report",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{patient_token}}"
							}
						],
						"url": {
							"raw": "{{backend_url}}/prescriptions/adherence-report?period=30days&include_recommendations=true",
							"host": ["{{backend_url}}"],
							"path": ["prescriptions", "adherence-report"],
							"query": [
								{
									"key": "period",
									"value": "30days"
								},
								{
									"key": "include_recommendations",
									"value": "true"
								}
							]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Adherence report retrieved', function () {",
									"    pm.response.to.have.status(200);",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.data).to.have.property('adherence_score');",
									"    pm.expect(jsonData.data).to.have.property('medications');",
									"    pm.expect(jsonData.data).to.have.property('recommendations');",
									"});"
								]
							}
						}
					]
				}
			]
		},
		{
			"name": "Pharmacy Integration",
			"item": [
				{
					"name": "Get Nearby Pharmacies",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{patient_token}}"
							}
						],
						"url": {
							"raw": "{{backend_url}}/pharmacies/search?latitude=15.5007&longitude=32.5599&radius=10&insurance_accepted=true",
							"host": ["{{backend_url}}"],
							"path": ["pharmacies", "search"],
							"query": [
								{
									"key": "latitude",
									"value": "15.5007"
								},
								{
									"key": "longitude",
									"value": "32.5599"
								},
								{
									"key": "radius",
									"value": "10"
								},
								{
									"key": "insurance_accepted",
									"value": "true"
								}
							]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Nearby pharmacies found', function () {",
									"    pm.response.to.have.status(200);",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.data.pharmacies).to.be.an('array');",
									"    ",
									"    if (jsonData.data.pharmacies.length > 0) {",
									"        pm.expect(jsonData.data.pharmacies[0]).to.have.property('name');",
									"        pm.expect(jsonData.data.pharmacies[0]).to.have.property('address');",
									"        pm.expect(jsonData.data.pharmacies[0]).to.have.property('distance_km');",
									"        ",
									"        // Save first pharmacy for other tests",
									"        pm.environment.set('pharmacy_id', jsonData.data.pharmacies[0].id);",
									"    }",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "Check Medication Availability",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{patient_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"pharmacy_id\": {{pharmacy_id}},\n  \"medications\": [\n    {\n      \"name\": \"Metformin\",\n      \"strength\": \"500mg\",\n      \"quantity\": 90,\n      \"generic_acceptable\": true\n    },\n    {\n      \"name\": \"Lisinopril\",\n      \"strength\": \"10mg\",\n      \"quantity\": 30,\n      \"generic_acceptable\": true\n    }\n  ],\n  \"insurance_information\": {\n    \"provider\": \"Sudan National Health Insurance\",\n    \"policy_number\": \"SNHI123456789\",\n    \"group_number\": \"GRP001\"\n  }\n}"
						},
						"url": {
							"raw": "{{backend_url}}/pharmacies/check-availability",
							"host": ["{{backend_url}}"],
							"path": ["pharmacies", "check-availability"]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Medication availability checked', function () {",
									"    pm.response.to.have.status(200);",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.data.availability_results).to.be.an('array');",
									"    pm.expect(jsonData.data).to.have.property('total_estimated_cost');",
									"    pm.expect(jsonData.data).to.have.property('insurance_coverage');",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "Send Prescription to Pharmacy",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{patient_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"prescription_id\": {{prescription_id}},\n  \"pharmacy_id\": {{pharmacy_id}},\n  \"preferred_pickup_time\": \"2024-02-05T14:00:00Z\",\n  \"contact_when_ready\": true,\n  \"contact_method\": \"sms\",\n  \"special_instructions\": \"Please prepare generic versions where available\",\n  \"insurance_use\": true\n}"
						},
						"url": {
							"raw": "{{backend_url}}/prescriptions/send-to-pharmacy",
							"host": ["{{backend_url}}"],
							"path": ["prescriptions", "send-to-pharmacy"]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Prescription sent to pharmacy', function () {",
									"    pm.response.to.have.status(201);",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.data).to.have.property('pharmacy_order_id');",
									"    pm.expect(jsonData.data.status).to.equal('sent_to_pharmacy');",
									"    pm.expect(jsonData.data).to.have.property('estimated_ready_time');",
									"    ",
									"    // Save pharmacy order ID",
									"    pm.environment.set('pharmacy_order_id', jsonData.data.pharmacy_order_id);",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "Track Prescription Status",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{patient_token}}"
							}
						],
						"url": {
							"raw": "{{backend_url}}/prescriptions/track/{{pharmacy_order_id}}",
							"host": ["{{backend_url}}"],
							"path": ["prescriptions", "track", "{{pharmacy_order_id}}"]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Prescription status tracked', function () {",
									"    pm.response.to.have.status(200);",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.data).to.have.property('current_status');",
									"    pm.expect(jsonData.data).to.have.property('status_history');",
									"    pm.expect(jsonData.data).to.have.property('estimated_completion');",
									"});"
								]
							}
						}
					]
				}
			]
		},
		{
			"name": "Prescription Analytics",
			"item": [
				{
					"name": "Doctor Prescription Statistics",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{doctor_token}}"
							}
						],
						"url": {
							"raw": "{{backend_url}}/prescriptions/analytics/doctor-stats?period=3months&include_trends=true",
							"host": ["{{backend_url}}"],
							"path": ["prescriptions", "analytics", "doctor-stats"],
							"query": [
								{
									"key": "period",
									"value": "3months"
								},
								{
									"key": "include_trends",
									"value": "true"
								}
							]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Doctor prescription statistics retrieved', function () {",
									"    pm.response.to.have.status(200);",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.data).to.have.property('total_prescriptions');",
									"    pm.expect(jsonData.data).to.have.property('most_prescribed_medications');",
									"    pm.expect(jsonData.data).to.have.property('patient_adherence_rates');",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "Patient Medication History Analysis",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{patient_token}}"
							}
						],
						"url": {
							"raw": "{{backend_url}}/prescriptions/analytics/medication-history?period=1year&include_interactions=true",
							"host": ["{{backend_url}}"],
							"path": ["prescriptions", "analytics", "medication-history"],
							"query": [
								{
									"key": "period",
									"value": "1year"
								},
								{
									"key": "include_interactions",
									"value": "true"
								}
							]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Medication history analysis retrieved', function () {",
									"    pm.response.to.have.status(200);",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.data).to.have.property('medication_timeline');",
									"    pm.expect(jsonData.data).to.have.property('potential_interactions');",
									"    pm.expect(jsonData.data).to.have.property('adherence_patterns');",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "Drug Interaction Check",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{doctor_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"patient_id\": {{patient_id}},\n  \"new_medications\": [\n    {\n      \"name\": \"Warfarin\",\n      \"strength\": \"5mg\",\n      \"directions\": \"Take one tablet daily as directed\"\n    }\n  ],\n  \"include_supplements\": true,\n  \"include_over_counter\": true,\n  \"severity_threshold\": \"moderate\"\n}"
						},
						"url": {
							"raw": "{{backend_url}}/prescriptions/drug-interactions/check",
							"host": ["{{backend_url}}"],
							"path": ["prescriptions", "drug-interactions", "check"]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Drug interaction check completed', function () {",
									"    pm.response.to.have.status(200);",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.data).to.have.property('interactions_found');",
									"    pm.expect(jsonData.data).to.have.property('recommendations');",
									"    pm.expect(jsonData.data).to.have.property('severity_levels');",
									"});"
								]
							}
						}
					]
				}
			]
		},
		{
			"name": "Error Scenarios & Security",
			"item": [
				{
					"name": "Create Prescription Without Patient ID",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{doctor_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"diagnosis_code\": \"E11.9\",\n  \"medications\": [\n    {\n      \"name\": \"Metformin\",\n      \"strength\": \"500mg\",\n      \"quantity\": 30\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{backend_url}}/prescriptions/create",
							"host": ["{{backend_url}}"],
							"path": ["prescriptions", "create"]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Prescription creation fails without patient ID', function () {",
									"    pm.response.to.have.status(400);",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.false;",
									"    pm.expect(jsonData.message).to.include('patient_id');",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "Patient Access Another Patient's Prescription",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{patient_token}}"
							}
						],
						"url": {
							"raw": "{{backend_url}}/prescriptions/999999/details",
							"host": ["{{backend_url}}"],
							"path": ["prescriptions", "999999", "details"]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Unauthorized prescription access denied', function () {",
									"    pm.response.to.have.status(403);",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.false;",
									"    pm.expect(jsonData.message).to.include('access');",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "Invalid Medication Data",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{doctor_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"patient_id\": {{patient_id}},\n  \"medications\": [\n    {\n      \"name\": \"\",\n      \"strength\": \"invalid_strength\",\n      \"quantity\": -10,\n      \"directions\": \"\"\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{backend_url}}/prescriptions/create",
							"host": ["{{backend_url}}"],
							"path": ["prescriptions", "create"]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Invalid medication data rejected', function () {",
									"    pm.response.to.have.status(400);",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.false;",
									"    pm.expect(jsonData).to.have.property('errors');",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "Unauthenticated Access",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{backend_url}}/prescriptions/patient/list",
							"host": ["{{backend_url}}"],
							"path": ["prescriptions", "patient", "list"]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Unauthenticated access denied', function () {",
									"    pm.response.to.have.status(401);",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.false;",
									"});"
								]
							}
						}
					]
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Ensure required tokens and IDs exist",
					"if (!pm.environment.get('doctor_token')) {",
					"    console.error('Doctor token not found. Please run Authentication tests first.');",
					"}",
					"",
					"if (!pm.environment.get('patient_token')) {",
					"    console.error('Patient token not found. Please run Authentication tests first.');",
					"}",
					"",
					"if (!pm.environment.get('patient_id')) {",
					"    console.error('Patient ID not found. Please run Authentication tests first.');",
					"}",
					"",
					"// Note: appointment_id and pharmacy_id are optional and set during test execution"
				]
			}
		}
	]
}