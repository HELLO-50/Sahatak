{
	"info": {
		"name": "09 - Notifications System Tests",
		"description": "Test notification creation, delivery, preferences, real-time updates, and cross-platform messaging",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Notification Preferences",
			"item": [
				{
					"name": "Get User Notification Preferences",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{patient_token}}"
							}
						],
						"url": {
							"raw": "{{backend_url}}/notifications/preferences",
							"host": ["{{backend_url}}"],
							"path": ["notifications", "preferences"]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Notification preferences retrieved', function () {",
									"    pm.response.to.have.status(200);",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.data).to.have.property('preferences');",
									"    pm.expect(jsonData.data.preferences).to.have.property('email_notifications');",
									"    pm.expect(jsonData.data.preferences).to.have.property('sms_notifications');",
									"    pm.expect(jsonData.data.preferences).to.have.property('push_notifications');",
									"    pm.expect(jsonData.data.preferences).to.have.property('in_app_notifications');",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "Update Notification Preferences",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{patient_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email_notifications\": {\n    \"enabled\": true,\n    \"categories\": {\n      \"appointment_reminders\": true,\n      \"appointment_confirmations\": true,\n      \"appointment_cancellations\": true,\n      \"prescription_ready\": true,\n      \"lab_results\": true,\n      \"doctor_messages\": true,\n      \"system_updates\": false,\n      \"promotional\": false\n    },\n    \"frequency\": \"immediate\",\n    \"quiet_hours\": {\n      \"enabled\": false,\n      \"start_time\": \"22:00\",\n      \"end_time\": \"08:00\"\n    }\n  },\n  \"sms_notifications\": {\n    \"enabled\": true,\n    \"categories\": {\n      \"appointment_reminders\": true,\n      \"urgent_messages\": true,\n      \"prescription_ready\": false,\n      \"lab_results\": false,\n      \"system_alerts\": true\n    },\n    \"phone_number\": \"+249555123456\",\n    \"quiet_hours\": {\n      \"enabled\": true,\n      \"start_time\": \"21:00\",\n      \"end_time\": \"08:00\"\n    }\n  },\n  \"push_notifications\": {\n    \"enabled\": true,\n    \"categories\": {\n      \"appointment_reminders\": true,\n      \"new_messages\": true,\n      \"prescription_updates\": true,\n      \"lab_results\": true,\n      \"urgent_alerts\": true\n    },\n    \"sound_enabled\": true,\n    \"vibration_enabled\": true,\n    \"badge_count\": true\n  },\n  \"in_app_notifications\": {\n    \"enabled\": true,\n    \"categories\": {\n      \"all\": true\n    },\n    \"banner_style\": \"detailed\",\n    \"auto_dismiss_seconds\": 5\n  },\n  \"language_preference\": \"en\",\n  \"timezone\": \"Africa/Khartoum\"\n}"
						},
						"url": {
							"raw": "{{backend_url}}/notifications/preferences",
							"host": ["{{backend_url}}"],
							"path": ["notifications", "preferences"]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Notification preferences updated', function () {",
									"    pm.response.to.have.status(200);",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.data).to.have.property('updated_preferences');",
									"    pm.expect(jsonData.data.updated_preferences.email_notifications.enabled).to.be.true;",
									"    pm.expect(jsonData.data.updated_preferences.sms_notifications.enabled).to.be.true;",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "Register Device for Push Notifications",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{patient_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"device_token\": \"fK8j3mX9pL2wQ5vN7bH4tR6uY1iO3sA8mK9dF2gT5nE7xZ0cV4wL1qP6jH8uR3sM\",\n  \"device_type\": \"ios\",\n  \"device_name\": \"Sarah's iPhone\",\n  \"app_version\": \"1.2.0\",\n  \"os_version\": \"17.0\",\n  \"device_model\": \"iPhone 14\",\n  \"push_service\": \"apns\",\n  \"timezone\": \"Africa/Khartoum\",\n  \"language\": \"en\"\n}"
						},
						"url": {
							"raw": "{{backend_url}}/notifications/register-device",
							"host": ["{{backend_url}}"],
							"path": ["notifications", "register-device"]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Device registered for push notifications', function () {",
									"    pm.response.to.have.status(201);",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.data).to.have.property('device_id');",
									"    pm.expect(jsonData.data).to.have.property('registration_status');",
									"    pm.expect(jsonData.data.registration_status).to.equal('active');",
									"    ",
									"    // Save device ID for other tests",
									"    pm.environment.set('device_id', jsonData.data.device_id);",
									"});"
								]
							}
						}
					]
				}
			]
		},
		{
			"name": "In-App Notifications",
			"item": [
				{
					"name": "Get User Notifications",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{patient_token}}"
							}
						],
						"url": {
							"raw": "{{backend_url}}/notifications?status=unread&limit=20&category=all&sort=newest",
							"host": ["{{backend_url}}"],
							"path": ["notifications"],
							"query": [
								{
									"key": "status",
									"value": "unread"
								},
								{
									"key": "limit",
									"value": "20"
								},
								{
									"key": "category",
									"value": "all"
								},
								{
									"key": "sort",
									"value": "newest"
								}
							]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('User notifications retrieved', function () {",
									"    pm.response.to.have.status(200);",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.data).to.have.property('notifications');",
									"    pm.expect(jsonData.data.notifications).to.be.an('array');",
									"    pm.expect(jsonData.data).to.have.property('total_count');",
									"    pm.expect(jsonData.data).to.have.property('unread_count');",
									"    ",
									"    // Save first notification ID if exists",
									"    if (jsonData.data.notifications.length > 0) {",
									"        pm.environment.set('notification_id', jsonData.data.notifications[0].id);",
									"    }",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "Create System Notification",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{admin_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"recipient_id\": {{patient_id}},\n  \"notification_type\": \"appointment_reminder\",\n  \"category\": \"appointment\",\n  \"title\": \"Upcoming Appointment Reminder\",\n  \"message\": \"You have an appointment with Dr. Smith tomorrow at 2:00 PM. Please arrive 15 minutes early for check-in.\",\n  \"priority\": \"normal\",\n  \"delivery_methods\": [\"in_app\", \"email\", \"sms\"],\n  \"scheduled_delivery\": null,\n  \"expires_at\": \"2024-02-08T18:00:00Z\",\n  \"action_buttons\": [\n    {\n      \"text\": \"Confirm Attendance\",\n      \"action_type\": \"confirm_appointment\",\n      \"action_data\": {\n        \"appointment_id\": {{appointment_id}}\n      }\n    },\n    {\n      \"text\": \"Reschedule\",\n      \"action_type\": \"reschedule_appointment\",\n      \"action_data\": {\n        \"appointment_id\": {{appointment_id}}\n      }\n    }\n  ],\n  \"metadata\": {\n    \"appointment_id\": {{appointment_id}},\n    \"doctor_name\": \"Dr. John Smith\",\n    \"appointment_date\": \"2024-02-07\",\n    \"appointment_time\": \"14:00\"\n  }\n}"
						},
						"url": {
							"raw": "{{backend_url}}/notifications/create",
							"host": ["{{backend_url}}"],
							"path": ["notifications", "create"]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('System notification created', function () {",
									"    pm.response.to.have.status(201);",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.data).to.have.property('notification_id');",
									"    pm.expect(jsonData.data).to.have.property('delivery_status');",
									"    pm.expect(jsonData.data.delivery_status).to.have.property('in_app');",
									"    pm.expect(jsonData.data.delivery_status).to.have.property('email');",
									"    pm.expect(jsonData.data.delivery_status).to.have.property('sms');",
									"    ",
									"    // Save notification ID",
									"    pm.environment.set('system_notification_id', jsonData.data.notification_id);",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "Mark Notification as Read",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{patient_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"notification_ids\": [{{system_notification_id}}]\n}"
						},
						"url": {
							"raw": "{{backend_url}}/notifications/mark-read",
							"host": ["{{backend_url}}"],
							"path": ["notifications", "mark-read"]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Notification marked as read', function () {",
									"    pm.response.to.have.status(200);",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.data).to.have.property('updated_notifications');",
									"    pm.expect(jsonData.data.updated_notifications).to.be.greaterThan(0);",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "Handle Notification Action",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{patient_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"notification_id\": {{system_notification_id}},\n  \"action_type\": \"confirm_appointment\",\n  \"action_data\": {\n    \"appointment_id\": {{appointment_id}},\n    \"confirmation_method\": \"notification_action\",\n    \"user_notes\": \"I will be there on time\"\n  }\n}"
						},
						"url": {
							"raw": "{{backend_url}}/notifications/handle-action",
							"host": ["{{backend_url}}"],
							"path": ["notifications", "handle-action"]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Notification action handled', function () {",
									"    pm.response.to.have.status(200);",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.data).to.have.property('action_result');",
									"    pm.expect(jsonData.data).to.have.property('notification_updated');",
									"    pm.expect(jsonData.data.notification_updated).to.be.true;",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "Dismiss Notification",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{patient_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"notification_ids\": [{{system_notification_id}}],\n  \"dismiss_reason\": \"user_action_completed\"\n}"
						},
						"url": {
							"raw": "{{backend_url}}/notifications/dismiss",
							"host": ["{{backend_url}}"],
							"path": ["notifications", "dismiss"]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Notification dismissed', function () {",
									"    pm.response.to.have.status(200);",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.data).to.have.property('dismissed_notifications');",
									"    pm.expect(jsonData.data.dismissed_notifications).to.be.greaterThan(0);",
									"});"
								]
							}
						}
					]
				}
			]
		},
		{
			"name": "Automated Notifications",
			"item": [
				{
					"name": "Trigger Appointment Reminder",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{admin_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"trigger_type\": \"appointment_reminder\",\n  \"appointment_id\": {{appointment_id}},\n  \"reminder_type\": \"24_hours\",\n  \"patient_id\": {{patient_id}},\n  \"doctor_id\": {{doctor_id}},\n  \"appointment_details\": {\n    \"date\": \"2024-02-07\",\n    \"time\": \"14:00\",\n    \"duration_minutes\": 30,\n    \"appointment_type\": \"consultation\",\n    \"location\": \"Medical Center, Room 301\"\n  },\n  \"custom_message\": \"Please remember to bring your insurance card and any recent lab results.\",\n  \"delivery_preferences\": {\n    \"methods\": [\"email\", \"sms\", \"push\"],\n    \"schedule_time\": null\n  }\n}"
						},
						"url": {
							"raw": "{{backend_url}}/notifications/triggers/appointment-reminder",
							"host": ["{{backend_url}}"],
							"path": ["notifications", "triggers", "appointment-reminder"]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Appointment reminder triggered', function () {",
									"    pm.response.to.have.status(201);",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.data).to.have.property('trigger_id');",
									"    pm.expect(jsonData.data).to.have.property('notifications_queued');",
									"    pm.expect(jsonData.data.notifications_queued).to.be.greaterThan(0);",
									"    ",
									"    // Save trigger ID",
									"    pm.environment.set('reminder_trigger_id', jsonData.data.trigger_id);",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "Trigger Lab Results Notification",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{doctor_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"trigger_type\": \"lab_results_available\",\n  \"patient_id\": {{patient_id}},\n  \"lab_result_id\": {{lab_result_id}},\n  \"result_summary\": {\n    \"test_name\": \"Complete Blood Count\",\n    \"test_date\": \"2024-02-05\",\n    \"status\": \"normal\",\n    \"requires_follow_up\": false,\n    \"critical_values\": false\n  },\n  \"doctor_notes\": \"All values are within normal range. Continue current medications as prescribed.\",\n  \"follow_up_required\": false,\n  \"delivery_preferences\": {\n    \"methods\": [\"email\", \"push\", \"in_app\"],\n    \"priority\": \"normal\",\n    \"include_pdf_report\": true\n  }\n}"
						},
						"url": {
							"raw": "{{backend_url}}/notifications/triggers/lab-results",
							"host": ["{{backend_url}}"],
							"path": ["notifications", "triggers", "lab-results"]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Lab results notification triggered', function () {",
									"    pm.response.to.have.status(201);",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.data).to.have.property('trigger_id');",
									"    pm.expect(jsonData.data).to.have.property('patient_notified');",
									"    pm.expect(jsonData.data.patient_notified).to.be.true;",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "Trigger Prescription Ready Notification",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{admin_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"trigger_type\": \"prescription_ready\",\n  \"patient_id\": {{patient_id}},\n  \"prescription_id\": {{prescription_id}},\n  \"pharmacy_info\": {\n    \"name\": \"Khartoum Central Pharmacy\",\n    \"address\": \"123 Main Street, Khartoum\",\n    \"phone\": \"+249111222333\",\n    \"pickup_hours\": \"8:00 AM - 8:00 PM, Monday-Saturday\"\n  },\n  \"medications_ready\": [\n    {\n      \"name\": \"Metformin 500mg\",\n      \"quantity\": \"90 tablets\",\n      \"instructions\": \"Take twice daily with meals\"\n    },\n    {\n      \"name\": \"Lisinopril 10mg\",\n      \"quantity\": \"30 tablets\",\n      \"instructions\": \"Take once daily in the morning\"\n    }\n  ],\n  \"total_cost\": {\n    \"amount\": 125.50,\n    \"currency\": \"SDG\",\n    \"insurance_covered\": 100.00,\n    \"patient_pays\": 25.50\n  },\n  \"pickup_deadline\": \"2024-02-14\",\n  \"special_instructions\": \"Please bring your insurance card and prescription receipt.\"\n}"
						},
						"url": {
							"raw": "{{backend_url}}/notifications/triggers/prescription-ready",
							"host": ["{{backend_url}}"],
							"path": ["notifications", "triggers", "prescription-ready"]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Prescription ready notification triggered', function () {",
									"    pm.response.to.have.status(201);",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.data).to.have.property('trigger_id');",
									"    pm.expect(jsonData.data).to.have.property('delivery_channels');",
									"    pm.expect(jsonData.data.delivery_channels).to.be.an('array');",
									"});"
								]
							}
						}
					]
				}
			]
		},
		{
			"name": "Real-time Notifications",
			"item": [
				{
					"name": "Test WebSocket Connection",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{patient_token}}"
							}
						],
						"url": {
							"raw": "{{backend_url}}/notifications/websocket/status",
							"host": ["{{backend_url}}"],
							"path": ["notifications", "websocket", "status"]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('WebSocket connection status retrieved', function () {",
									"    pm.response.to.have.status(200);",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.data).to.have.property('websocket_enabled');",
									"    pm.expect(jsonData.data).to.have.property('connection_url');",
									"    pm.expect(jsonData.data).to.have.property('supported_events');",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "Send Real-time Notification",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{doctor_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"recipient_id\": {{patient_id}},\n  \"notification_type\": \"urgent_message\",\n  \"category\": \"message\",\n  \"title\": \"Urgent Message from Dr. Smith\",\n  \"message\": \"I've reviewed your test results and would like to discuss them with you. Please call the office at your earliest convenience.\",\n  \"priority\": \"high\",\n  \"delivery_methods\": [\"websocket\", \"push\", \"sms\"],\n  \"real_time_data\": {\n    \"sender_name\": \"Dr. John Smith\",\n    \"sender_avatar\": \"/avatars/doctor_smith.jpg\",\n    \"conversation_id\": {{conversation_id}},\n    \"requires_response\": true\n  },\n  \"expires_at\": \"2024-02-07T20:00:00Z\"\n}"
						},
						"url": {
							"raw": "{{backend_url}}/notifications/real-time/send",
							"host": ["{{backend_url}}"],
							"path": ["notifications", "real-time", "send"]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Real-time notification sent', function () {",
									"    pm.response.to.have.status(201);",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.data).to.have.property('notification_id');",
									"    pm.expect(jsonData.data).to.have.property('websocket_delivered');",
									"    pm.expect(jsonData.data).to.have.property('delivery_timestamp');",
									"    ",
									"    // Save real-time notification ID",
									"    pm.environment.set('realtime_notification_id', jsonData.data.notification_id);",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "Get Real-time Notification Status",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{doctor_token}}"
							}
						],
						"url": {
							"raw": "{{backend_url}}/notifications/{{realtime_notification_id}}/delivery-status",
							"host": ["{{backend_url}}"],
							"path": ["notifications", "{{realtime_notification_id}}", "delivery-status"]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Notification delivery status retrieved', function () {",
									"    pm.response.to.have.status(200);",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.data).to.have.property('notification_id');",
									"    pm.expect(jsonData.data).to.have.property('delivery_attempts');",
									"    pm.expect(jsonData.data).to.have.property('delivery_status');",
									"    pm.expect(jsonData.data).to.have.property('read_status');",
									"});"
								]
							}
						}
					]
				}
			]
		},
		{
			"name": "Broadcast Notifications",
			"item": [
				{
					"name": "Create System-wide Announcement",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{admin_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"announcement_type\": \"system_maintenance\",\n  \"target_audience\": {\n    \"user_types\": [\"patient\", \"doctor\"],\n    \"locations\": [\"all\"],\n    \"active_users_only\": true\n  },\n  \"title\": \"Scheduled System Maintenance\",\n  \"message\": \"Our system will undergo scheduled maintenance on February 10th from 2:00 AM to 4:00 AM (Africa/Khartoum time). During this time, some features may be temporarily unavailable. We apologize for any inconvenience.\",\n  \"priority\": \"medium\",\n  \"delivery_methods\": [\"in_app\", \"email\"],\n  \"scheduled_delivery\": \"2024-02-08T10:00:00Z\",\n  \"expires_at\": \"2024-02-11T06:00:00Z\",\n  \"category\": \"system_update\",\n  \"action_buttons\": [\n    {\n      \"text\": \"Learn More\",\n      \"action_type\": \"open_url\",\n      \"action_data\": {\n        \"url\": \"https://help.sahatak.com/maintenance-schedule\"\n      }\n    }\n  ],\n  \"metadata\": {\n    \"maintenance_id\": \"MAINT_2024_02_001\",\n    \"estimated_duration_hours\": 2,\n    \"affected_services\": [\"appointments\", \"messaging\", \"prescriptions\"]\n  }\n}"
						},
						"url": {
							"raw": "{{backend_url}}/notifications/broadcast/announcement",
							"host": ["{{backend_url}}"],
							"path": ["notifications", "broadcast", "announcement"]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('System announcement created', function () {",
									"    pm.response.to.have.status(201);",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.data).to.have.property('announcement_id');",
									"    pm.expect(jsonData.data).to.have.property('target_user_count');",
									"    pm.expect(jsonData.data.target_user_count).to.be.greaterThan(0);",
									"    pm.expect(jsonData.data).to.have.property('delivery_schedule');",
									"    ",
									"    // Save announcement ID",
									"    pm.environment.set('announcement_id', jsonData.data.announcement_id);",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "Send Emergency Alert",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{admin_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"alert_type\": \"security_incident\",\n  \"severity\": \"high\",\n  \"target_audience\": {\n    \"user_types\": [\"patient\", \"doctor\", \"admin\"],\n    \"locations\": [\"all\"],\n    \"immediate_delivery\": true\n  },\n  \"title\": \"Security Alert: Password Reset Required\",\n  \"message\": \"We've detected suspicious activity and are requiring all users to reset their passwords immediately. Please log in and update your password to secure your account.\",\n  \"delivery_methods\": [\"push\", \"email\", \"sms\", \"in_app\"],\n  \"priority\": \"critical\",\n  \"override_quiet_hours\": true,\n  \"action_buttons\": [\n    {\n      \"text\": \"Reset Password\",\n      \"action_type\": \"reset_password\",\n      \"action_data\": {\n        \"redirect_url\": \"/reset-password\"\n      }\n    },\n    {\n      \"text\": \"Contact Support\",\n      \"action_type\": \"contact_support\",\n      \"action_data\": {\n        \"support_type\": \"security\"\n      }\n    }\n  ],\n  \"metadata\": {\n    \"incident_id\": \"SEC_2024_002\",\n    \"response_required\": true,\n    \"compliance_alert\": true\n  }\n}"
						},
						"url": {
							"raw": "{{backend_url}}/notifications/broadcast/emergency-alert",
							"host": ["{{backend_url}}"],
							"path": ["notifications", "broadcast", "emergency-alert"]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Emergency alert sent', function () {",
									"    pm.response.to.have.status(201);",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.data).to.have.property('alert_id');",
									"    pm.expect(jsonData.data).to.have.property('immediate_delivery_count');",
									"    pm.expect(jsonData.data.immediate_delivery_count).to.be.greaterThan(0);",
									"    pm.expect(jsonData.data).to.have.property('delivery_channels_used');",
									"    ",
									"    // Save alert ID",
									"    pm.environment.set('emergency_alert_id', jsonData.data.alert_id);",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "Get Broadcast Status",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{admin_token}}"
							}
						],
						"url": {
							"raw": "{{backend_url}}/notifications/broadcast/{{announcement_id}}/status",
							"host": ["{{backend_url}}"],
							"path": ["notifications", "broadcast", "{{announcement_id}}", "status"]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Broadcast status retrieved', function () {",
									"    pm.response.to.have.status(200);",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.data).to.have.property('broadcast_id');",
									"    pm.expect(jsonData.data).to.have.property('delivery_statistics');",
									"    pm.expect(jsonData.data.delivery_statistics).to.have.property('total_targeted');",
									"    pm.expect(jsonData.data.delivery_statistics).to.have.property('successfully_delivered');",
									"    pm.expect(jsonData.data.delivery_statistics).to.have.property('failed_deliveries');",
									"});"
								]
							}
						}
					]
				}
			]
		},
		{
			"name": "Analytics & Reports",
			"item": [
				{
					"name": "Get Notification Analytics",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{admin_token}}"
							}
						],
						"url": {
							"raw": "{{backend_url}}/notifications/analytics?period=30days&group_by=type&include_delivery_rates=true&include_engagement=true",
							"host": ["{{backend_url}}"],
							"path": ["notifications", "analytics"],
							"query": [
								{
									"key": "period",
									"value": "30days"
								},
								{
									"key": "group_by",
									"value": "type"
								},
								{
									"key": "include_delivery_rates",
									"value": "true"
								},
								{
									"key": "include_engagement",
									"value": "true"
								}
							]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Notification analytics retrieved', function () {",
									"    pm.response.to.have.status(200);",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.data).to.have.property('total_notifications');",
									"    pm.expect(jsonData.data).to.have.property('delivery_rates');",
									"    pm.expect(jsonData.data).to.have.property('engagement_metrics');",
									"    pm.expect(jsonData.data).to.have.property('notification_types');",
									"    pm.expect(jsonData.data.delivery_rates).to.have.property('overall_success_rate');",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "Get User Engagement Report",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{patient_token}}"
							}
						],
						"url": {
							"raw": "{{backend_url}}/notifications/user-engagement?period=90days&include_preferences=true",
							"host": ["{{backend_url}}"],
							"path": ["notifications", "user-engagement"],
							"query": [
								{
									"key": "period",
									"value": "90days"
								},
								{
									"key": "include_preferences",
									"value": "true"
								}
							]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('User engagement report retrieved', function () {",
									"    pm.response.to.have.status(200);",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.data).to.have.property('notifications_received');",
									"    pm.expect(jsonData.data).to.have.property('notifications_read');",
									"    pm.expect(jsonData.data).to.have.property('actions_taken');",
									"    pm.expect(jsonData.data).to.have.property('response_times');",
									"    pm.expect(jsonData.data).to.have.property('preferred_channels');",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "Generate Notification Report",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{admin_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"report_type\": \"comprehensive\",\n  \"date_range\": {\n    \"start_date\": \"2024-01-01\",\n    \"end_date\": \"2024-01-31\"\n  },\n  \"include_sections\": [\n    \"delivery_statistics\",\n    \"engagement_metrics\",\n    \"user_preferences_analysis\",\n    \"channel_performance\",\n    \"notification_types_breakdown\",\n    \"failure_analysis\",\n    \"recommendations\"\n  ],\n  \"format\": \"pdf\",\n  \"filters\": {\n    \"user_types\": [\"patient\", \"doctor\"],\n    \"notification_categories\": [\"appointment\", \"prescription\", \"message\", \"system\"],\n    \"delivery_methods\": [\"email\", \"sms\", \"push\", \"in_app\"]\n  },\n  \"group_by\": [\"week\", \"notification_type\"],\n  \"include_charts\": true,\n  \"include_raw_data\": false\n}"
						},
						"url": {
							"raw": "{{backend_url}}/notifications/reports/generate",
							"host": ["{{backend_url}}"],
							"path": ["notifications", "reports", "generate"]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Notification report generated', function () {",
									"    pm.response.to.have.status(202);",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.data).to.have.property('report_id');",
									"    pm.expect(jsonData.data).to.have.property('estimated_completion_time');",
									"    pm.expect(jsonData.data.status).to.equal('processing');",
									"    ",
									"    // Save report ID",
									"    pm.environment.set('notification_report_id', jsonData.data.report_id);",
									"});"
								]
							}
						}
					]
				}
			]
		},
		{
			"name": "Error Scenarios & Security",
			"item": [
				{
					"name": "Create Notification Without Authentication",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"recipient_id\": {{patient_id}},\n  \"title\": \"Unauthorized notification\",\n  \"message\": \"This should fail\"\n}"
						},
						"url": {
							"raw": "{{backend_url}}/notifications/create",
							"host": ["{{backend_url}}"],
							"path": ["notifications", "create"]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Unauthenticated notification creation denied', function () {",
									"    pm.response.to.have.status(401);",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.false;",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "Patient Create System Notification",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{patient_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"recipient_id\": {{doctor_id}},\n  \"notification_type\": \"system_alert\",\n  \"title\": \"Unauthorized system notification\",\n  \"message\": \"Patient should not create system notifications\"\n}"
						},
						"url": {
							"raw": "{{backend_url}}/notifications/create",
							"host": ["{{backend_url}}"],
							"path": ["notifications", "create"]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Patient cannot create system notifications', function () {",
									"    pm.response.to.have.status(403);",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.false;",
									"    pm.expect(jsonData.message).to.include('permission');",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "Invalid Notification Data",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{admin_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"recipient_id\": \"invalid_id\",\n  \"title\": \"\",\n  \"message\": \"\",\n  \"priority\": \"invalid_priority\",\n  \"delivery_methods\": [\"invalid_method\"]\n}"
						},
						"url": {
							"raw": "{{backend_url}}/notifications/create",
							"host": ["{{backend_url}}"],
							"path": ["notifications", "create"]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Invalid notification data rejected', function () {",
									"    pm.response.to.have.status(400);",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.false;",
									"    pm.expect(jsonData).to.have.property('errors');",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "Access Another User's Notifications",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{patient_token}}"
							}
						],
						"url": {
							"raw": "{{backend_url}}/notifications?user_id={{doctor_id}}",
							"host": ["{{backend_url}}"],
							"path": ["notifications"],
							"query": [
								{
									"key": "user_id",
									"value": "{{doctor_id}}"
								}
							]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Cannot access other user notifications', function () {",
									"    // Should only return the authenticated user's notifications",
									"    // or return 403 if trying to access specific user_id parameter",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 403]);",
									"    ",
									"    if (pm.response.code === 200) {",
									"        // If successful, verify it only returns current user's notifications",
									"        var jsonData = pm.response.json();",
									"        pm.expect(jsonData.success).to.be.true;",
									"        // Implementation should ignore user_id parameter for security",
									"    }",
									"});"
								]
							}
						}
					]
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Ensure required tokens exist",
					"if (!pm.environment.get('patient_token')) {",
					"    console.error('Patient token not found. Please run Authentication tests first.');",
					"}",
					"",
					"if (!pm.environment.get('doctor_token')) {",
					"    console.error('Doctor token not found. Please run Authentication tests first.');",
					"}",
					"",
					"if (!pm.environment.get('admin_token')) {",
					"    console.error('Admin token not found. Please run Authentication tests first.');",
					"}",
					"",
					"if (!pm.environment.get('patient_id')) {",
					"    console.error('Patient ID not found. Please run Authentication tests first.');",
					"}",
					"",
					"if (!pm.environment.get('doctor_id')) {",
					"    console.error('Doctor ID not found. Please run Authentication tests first.');",
					"}"
				]
			}
		}
	]
}