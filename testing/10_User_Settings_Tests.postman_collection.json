{
	"info": {
		"name": "10 - User Settings & Profile Management Tests",
		"description": "Test user profile updates, privacy settings, security configurations, and account management",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Profile Management",
			"item": [
				{
					"name": "Get User Profile",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{patient_token}}"
							}
						],
						"url": {
							"raw": "{{backend_url}}/users/profile",
							"host": ["{{backend_url}}"],
							"path": ["users", "profile"]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('User profile retrieved successfully', function () {",
									"    pm.response.to.have.status(200);",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.data).to.have.property('user_id');",
									"    pm.expect(jsonData.data).to.have.property('full_name');",
									"    pm.expect(jsonData.data).to.have.property('email');",
									"    pm.expect(jsonData.data).to.have.property('user_type');",
									"    pm.expect(jsonData.data).to.have.property('profile_completion');",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "Update Basic Profile Information",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{patient_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"full_name\": \"Sarah Johnson-Updated\",\n  \"phone\": \"+249555123999\",\n  \"date_of_birth\": \"1990-05-15\",\n  \"gender\": \"female\",\n  \"address\": {\n    \"street\": \"456 New Street\",\n    \"city\": \"Khartoum\",\n    \"state\": \"Khartoum State\",\n    \"postal_code\": \"11111\",\n    \"country\": \"Sudan\"\n  },\n  \"emergency_contact\": {\n    \"name\": \"John Smith\",\n    \"relationship\": \"spouse\",\n    \"phone\": \"+249555987654\",\n    \"email\": \"john.smith@email.com\"\n  },\n  \"preferred_language\": \"en\",\n  \"timezone\": \"Africa/Khartoum\",\n  \"bio\": \"Updated patient profile with new contact information.\"\n}"
						},
						"url": {
							"raw": "{{backend_url}}/users/profile/basic",
							"host": ["{{backend_url}}"],
							"path": ["users", "profile", "basic"]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Basic profile updated successfully', function () {",
									"    pm.response.to.have.status(200);",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.data).to.have.property('updated_fields');",
									"    pm.expect(jsonData.data.updated_fields).to.be.an('array');",
									"    pm.expect(jsonData.data).to.have.property('profile_completion_percentage');",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "Update Profile Picture",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "multipart/form-data"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{patient_token}}"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "profile_picture",
									"type": "file",
									"src": [],
									"description": "Profile picture file (JPEG/PNG, max 5MB)"
								},
								{
									"key": "crop_settings",
									"value": "{\"x\": 10, \"y\": 10, \"width\": 200, \"height\": 200}",
									"type": "text",
									"description": "Image cropping settings (JSON)"
								}
							]
						},
						"url": {
							"raw": "{{backend_url}}/users/profile/picture",
							"host": ["{{backend_url}}"],
							"path": ["users", "profile", "picture"]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Profile picture upload handled', function () {",
									"    // This test may succeed with actual file or fail without file",
									"    // Both 200 (success) and 400 (no file) are acceptable responses",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 400]);",
									"    var jsonData = pm.response.json();",
									"    ",
									"    if (pm.response.code === 200) {",
									"        pm.expect(jsonData.success).to.be.true;",
									"        pm.expect(jsonData.data).to.have.property('profile_picture_url');",
									"    } else {",
									"        pm.expect(jsonData.success).to.be.false;",
									"        pm.expect(jsonData.message).to.include('file');",
									"    }",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "Get Profile Completion Status",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{patient_token}}"
							}
						],
						"url": {
							"raw": "{{backend_url}}/users/profile/completion-status",
							"host": ["{{backend_url}}"],
							"path": ["users", "profile", "completion-status"]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Profile completion status retrieved', function () {",
									"    pm.response.to.have.status(200);",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.data).to.have.property('completion_percentage');",
									"    pm.expect(jsonData.data).to.have.property('completed_sections');",
									"    pm.expect(jsonData.data).to.have.property('missing_sections');",
									"    pm.expect(jsonData.data).to.have.property('recommendations');",
									"    pm.expect(jsonData.data.completed_sections).to.be.an('array');",
									"    pm.expect(jsonData.data.missing_sections).to.be.an('array');",
									"});"
								]
							}
						}
					]
				}
			]
		},
		{
			"name": "Privacy Settings",
			"item": [
				{
					"name": "Get Privacy Settings",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{patient_token}}"
							}
						],
						"url": {
							"raw": "{{backend_url}}/users/privacy-settings",
							"host": ["{{backend_url}}"],
							"path": ["users", "privacy-settings"]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Privacy settings retrieved', function () {",
									"    pm.response.to.have.status(200);",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.data).to.have.property('data_sharing');",
									"    pm.expect(jsonData.data).to.have.property('profile_visibility');",
									"    pm.expect(jsonData.data).to.have.property('communication_preferences');",
									"    pm.expect(jsonData.data).to.have.property('medical_data_sharing');",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "Update Privacy Settings",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{patient_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"data_sharing\": {\n    \"share_with_healthcare_providers\": true,\n    \"share_with_insurance\": false,\n    \"share_with_research_institutions\": false,\n    \"share_with_family_members\": true,\n    \"anonymous_statistics\": true,\n    \"marketing_purposes\": false\n  },\n  \"profile_visibility\": {\n    \"show_full_name\": false,\n    \"show_profile_picture\": true,\n    \"show_contact_info\": false,\n    \"show_medical_conditions\": false,\n    \"show_last_activity\": false\n  },\n  \"communication_preferences\": {\n    \"allow_doctor_messages\": true,\n    \"allow_appointment_reminders\": true,\n    \"allow_prescription_notifications\": true,\n    \"allow_lab_result_notifications\": true,\n    \"allow_promotional_messages\": false,\n    \"allow_survey_invitations\": false\n  },\n  \"medical_data_sharing\": {\n    \"emergency_access\": {\n      \"enabled\": true,\n      \"authorized_contacts\": [\n        {\n          \"name\": \"John Smith\",\n          \"relationship\": \"spouse\",\n          \"phone\": \"+249555987654\",\n          \"access_level\": \"full\"\n        }\n      ]\n    },\n    \"research_participation\": {\n      \"enabled\": false,\n      \"anonymized_data_only\": true,\n      \"specific_conditions\": []\n    },\n    \"cross_provider_sharing\": {\n      \"enabled\": true,\n      \"require_explicit_consent\": true,\n      \"sharing_duration_days\": 365\n    }\n  },\n  \"data_retention\": {\n    \"automatic_deletion\": false,\n    \"deletion_after_inactivity_months\": 24,\n    \"keep_essential_medical_records\": true\n  }\n}"
						},
						"url": {
							"raw": "{{backend_url}}/users/privacy-settings",
							"host": ["{{backend_url}}"],
							"path": ["users", "privacy-settings"]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Privacy settings updated successfully', function () {",
									"    pm.response.to.have.status(200);",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.data).to.have.property('updated_settings');",
									"    pm.expect(jsonData.data).to.have.property('effective_date');",
									"    pm.expect(jsonData.data.updated_settings.data_sharing.share_with_healthcare_providers).to.be.true;",
									"    pm.expect(jsonData.data.updated_settings.data_sharing.marketing_purposes).to.be.false;",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "Export Personal Data (GDPR Request)",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{patient_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"export_type\": \"full_data_export\",\n  \"data_categories\": [\n    \"profile_information\",\n    \"medical_history\",\n    \"appointments\",\n    \"prescriptions\",\n    \"messages\",\n    \"notifications\",\n    \"activity_logs\"\n  ],\n  \"format\": \"json\",\n  \"include_deleted_data\": false,\n  \"date_range\": {\n    \"start_date\": \"2020-01-01\",\n    \"end_date\": \"2024-02-07\"\n  },\n  \"delivery_method\": \"secure_download\",\n  \"reason\": \"Personal records request\",\n  \"verification_method\": \"email_confirmation\"\n}"
						},
						"url": {
							"raw": "{{backend_url}}/users/data-export",
							"host": ["{{backend_url}}"],
							"path": ["users", "data-export"]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Data export request submitted', function () {",
									"    pm.response.to.have.status(202);",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.data).to.have.property('export_request_id');",
									"    pm.expect(jsonData.data).to.have.property('estimated_completion_time');",
									"    pm.expect(jsonData.data).to.have.property('verification_required');",
									"    pm.expect(jsonData.data.status).to.equal('processing');",
									"    ",
									"    // Save export request ID",
									"    pm.environment.set('data_export_id', jsonData.data.export_request_id);",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "Check Data Export Status",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{patient_token}}"
							}
						],
						"url": {
							"raw": "{{backend_url}}/users/data-export/{{data_export_id}}/status",
							"host": ["{{backend_url}}"],
							"path": ["users", "data-export", "{{data_export_id}}", "status"]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Data export status checked', function () {",
									"    pm.response.to.have.status(200);",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.data).to.have.property('export_id');",
									"    pm.expect(jsonData.data).to.have.property('status');",
									"    pm.expect(jsonData.data).to.have.property('progress_percentage');",
									"    pm.expect(['processing', 'completed', 'failed']).to.include(jsonData.data.status);",
									"    ",
									"    if (jsonData.data.status === 'completed') {",
									"        pm.expect(jsonData.data).to.have.property('download_url');",
									"        pm.expect(jsonData.data).to.have.property('expires_at');",
									"    }",
									"});"
								]
							}
						}
					]
				}
			]
		},
		{
			"name": "Security Settings",
			"item": [
				{
					"name": "Get Security Settings",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{patient_token}}"
							}
						],
						"url": {
							"raw": "{{backend_url}}/users/security-settings",
							"host": ["{{backend_url}}"],
							"path": ["users", "security-settings"]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Security settings retrieved', function () {",
									"    pm.response.to.have.status(200);",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.data).to.have.property('two_factor_auth');",
									"    pm.expect(jsonData.data).to.have.property('login_alerts');",
									"    pm.expect(jsonData.data).to.have.property('active_sessions');",
									"    pm.expect(jsonData.data).to.have.property('password_policy');",
									"    pm.expect(jsonData.data).to.have.property('account_lock_settings');",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "Update Password",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{patient_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"current_password\": \"patient123\",\n  \"new_password\": \"NewSecurePassword123!\",\n  \"confirm_password\": \"NewSecurePassword123!\",\n  \"logout_other_sessions\": true,\n  \"require_reauth_for_sensitive_actions\": true\n}"
						},
						"url": {
							"raw": "{{backend_url}}/users/change-password",
							"host": ["{{backend_url}}"],
							"path": ["users", "change-password"]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Password update handled', function () {",
									"    // May succeed with correct password or fail with incorrect one",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 400, 401]);",
									"    var jsonData = pm.response.json();",
									"    ",
									"    if (pm.response.code === 200) {",
									"        pm.expect(jsonData.success).to.be.true;",
									"        pm.expect(jsonData.data).to.have.property('password_updated');",
									"        pm.expect(jsonData.data.password_updated).to.be.true;",
									"    } else {",
									"        pm.expect(jsonData.success).to.be.false;",
									"        pm.expect(jsonData.message).to.include('password');",
									"    }",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "Enable Two-Factor Authentication",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{patient_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"method\": \"totp\",\n  \"phone_number\": \"+249555123456\",\n  \"backup_codes_requested\": true,\n  \"app_name\": \"Google Authenticator\"\n}"
						},
						"url": {
							"raw": "{{backend_url}}/users/security/2fa/enable",
							"host": ["{{backend_url}}"],
							"path": ["users", "security", "2fa", "enable"]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('2FA setup initiated', function () {",
									"    pm.response.to.have.status(200);",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.data).to.have.property('setup_required');",
									"    pm.expect(jsonData.data).to.have.property('qr_code_url');",
									"    pm.expect(jsonData.data).to.have.property('manual_entry_key');",
									"    pm.expect(jsonData.data).to.have.property('backup_codes');",
									"    ",
									"    // Save 2FA setup data",
									"    pm.environment.set('2fa_secret', jsonData.data.manual_entry_key);",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "Get Active Sessions",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{patient_token}}"
							}
						],
						"url": {
							"raw": "{{backend_url}}/users/sessions/active",
							"host": ["{{backend_url}}"],
							"path": ["users", "sessions", "active"]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Active sessions retrieved', function () {",
									"    pm.response.to.have.status(200);",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.data.sessions).to.be.an('array');",
									"    pm.expect(jsonData.data).to.have.property('total_sessions');",
									"    pm.expect(jsonData.data).to.have.property('current_session');",
									"    ",
									"    // Verify session structure",
									"    if (jsonData.data.sessions.length > 0) {",
									"        var session = jsonData.data.sessions[0];",
									"        pm.expect(session).to.have.property('session_id');",
									"        pm.expect(session).to.have.property('device_info');",
									"        pm.expect(session).to.have.property('last_activity');",
									"        pm.expect(session).to.have.property('ip_address');",
									"        pm.expect(session).to.have.property('is_current');",
									"        ",
									"        // Save a non-current session ID for termination test",
									"        if (!session.is_current && !pm.environment.get('other_session_id')) {",
									"            pm.environment.set('other_session_id', session.session_id);",
									"        }",
									"    }",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "Revoke Session",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{patient_token}}"
							}
						],
						"url": {
							"raw": "{{backend_url}}/users/sessions/{{other_session_id}}",
							"host": ["{{backend_url}}"],
							"path": ["users", "sessions", "{{other_session_id}}"]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Session revocation handled', function () {",
									"    // May succeed if session exists or fail if not found",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 404]);",
									"    var jsonData = pm.response.json();",
									"    ",
									"    if (pm.response.code === 200) {",
									"        pm.expect(jsonData.success).to.be.true;",
									"        pm.expect(jsonData.data).to.have.property('session_revoked');",
									"        pm.expect(jsonData.data.session_revoked).to.be.true;",
									"    } else {",
									"        pm.expect(jsonData.success).to.be.false;",
									"        pm.expect(jsonData.message).to.include('session');",
									"    }",
									"});"
								]
							}
						}
					]
				}
			]
		},
		{
			"name": "Account Management",
			"item": [
				{
					"name": "Get Account Information",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{patient_token}}"
							}
						],
						"url": {
							"raw": "{{backend_url}}/users/account/info",
							"host": ["{{backend_url}}"],
							"path": ["users", "account", "info"]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Account information retrieved', function () {",
									"    pm.response.to.have.status(200);",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.data).to.have.property('account_created');",
									"    pm.expect(jsonData.data).to.have.property('last_login');",
									"    pm.expect(jsonData.data).to.have.property('account_status');",
									"    pm.expect(jsonData.data).to.have.property('subscription_info');",
									"    pm.expect(jsonData.data).to.have.property('storage_usage');",
									"    pm.expect(jsonData.data).to.have.property('activity_summary');",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "Update Email Address",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{patient_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"new_email\": \"sarah.johnson.new@example.com\",\n  \"current_password\": \"patient123\",\n  \"verification_method\": \"both_emails\"\n}"
						},
						"url": {
							"raw": "{{backend_url}}/users/change-email",
							"host": ["{{backend_url}}"],
							"path": ["users", "change-email"]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Email change request handled', function () {",
									"    // May succeed or fail based on current password validation",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 400, 401]);",
									"    var jsonData = pm.response.json();",
									"    ",
									"    if (pm.response.code === 200) {",
									"        pm.expect(jsonData.success).to.be.true;",
									"        pm.expect(jsonData.data).to.have.property('verification_required');",
									"        pm.expect(jsonData.data).to.have.property('verification_sent_to');",
									"    } else {",
									"        pm.expect(jsonData.success).to.be.false;",
									"    }",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "Deactivate Account",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{patient_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"deactivation_reason\": \"testing_purposes\",\n  \"feedback\": \"This is a test deactivation for API testing\",\n  \"current_password\": \"patient123\",\n  \"data_handling\": {\n    \"delete_personal_data\": false,\n    \"anonymize_medical_records\": false,\n    \"retain_for_legal_compliance\": true,\n    \"export_data_before_deactivation\": false\n  },\n  \"reactivation_period_days\": 30,\n  \"confirmation\": \"I understand this will deactivate my account\"\n}"
						},
						"url": {
							"raw": "{{backend_url}}/users/account/deactivate",
							"host": ["{{backend_url}}"],
							"path": ["users", "account", "deactivate"]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Account deactivation request handled', function () {",
									"    // This is a critical operation - should require proper authentication",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 400, 401]);",
									"    var jsonData = pm.response.json();",
									"    ",
									"    if (pm.response.code === 200) {",
									"        pm.expect(jsonData.success).to.be.true;",
									"        pm.expect(jsonData.data).to.have.property('deactivation_scheduled');",
									"        pm.expect(jsonData.data).to.have.property('reactivation_deadline');",
									"        pm.expect(jsonData.data).to.have.property('confirmation_id');",
									"    } else {",
									"        pm.expect(jsonData.success).to.be.false;",
									"    }",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "Get Activity Log",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{patient_token}}"
							}
						],
						"url": {
							"raw": "{{backend_url}}/users/activity-log?limit=50&days=30&include_login_attempts=true",
							"host": ["{{backend_url}}"],
							"path": ["users", "activity-log"],
							"query": [
								{
									"key": "limit",
									"value": "50"
								},
								{
									"key": "days",
									"value": "30"
								},
								{
									"key": "include_login_attempts",
									"value": "true"
								}
							]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Activity log retrieved', function () {",
									"    pm.response.to.have.status(200);",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.data.activities).to.be.an('array');",
									"    pm.expect(jsonData.data).to.have.property('total_activities');",
									"    pm.expect(jsonData.data).to.have.property('date_range');",
									"    ",
									"    // Verify activity structure",
									"    if (jsonData.data.activities.length > 0) {",
									"        var activity = jsonData.data.activities[0];",
									"        pm.expect(activity).to.have.property('timestamp');",
									"        pm.expect(activity).to.have.property('activity_type');",
									"        pm.expect(activity).to.have.property('ip_address');",
									"        pm.expect(activity).to.have.property('user_agent');",
									"        pm.expect(activity).to.have.property('status');",
									"    }",
									"});"
								]
							}
						}
					]
				}
			]
		},
		{
			"name": "Doctor-Specific Settings",
			"item": [
				{
					"name": "Get Doctor Professional Settings",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{doctor_token}}"
							}
						],
						"url": {
							"raw": "{{backend_url}}/users/doctor/professional-settings",
							"host": ["{{backend_url}}"],
							"path": ["users", "doctor", "professional-settings"]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Doctor professional settings retrieved', function () {",
									"    pm.response.to.have.status(200);",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.data).to.have.property('license_information');",
									"    pm.expect(jsonData.data).to.have.property('specializations');",
									"    pm.expect(jsonData.data).to.have.property('consultation_settings');",
									"    pm.expect(jsonData.data).to.have.property('availability_preferences');",
									"    pm.expect(jsonData.data).to.have.property('billing_information');",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "Update Consultation Settings",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{doctor_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"consultation_duration\": {\n    \"default_minutes\": 30,\n    \"minimum_minutes\": 15,\n    \"maximum_minutes\": 60,\n    \"buffer_time_minutes\": 5\n  },\n  \"consultation_types\": [\n    {\n      \"type\": \"routine_checkup\",\n      \"duration_minutes\": 30,\n      \"fee_sdg\": 200,\n      \"description\": \"Standard routine medical examination\"\n    },\n    {\n      \"type\": \"follow_up\",\n      \"duration_minutes\": 20,\n      \"fee_sdg\": 150,\n      \"description\": \"Follow-up appointment for existing condition\"\n    },\n    {\n      \"type\": \"urgent_consultation\",\n      \"duration_minutes\": 45,\n      \"fee_sdg\": 300,\n      \"description\": \"Urgent medical consultation\"\n    }\n  ],\n  \"online_consultations\": {\n    \"enabled\": true,\n    \"platforms\": [\"video_call\", \"phone_call\", \"chat\"],\n    \"fee_adjustment_percentage\": 0,\n    \"technical_requirements\": \"Stable internet connection required\"\n  },\n  \"payment_settings\": {\n    \"accepted_methods\": [\"cash\", \"card\", \"insurance\", \"mobile_payment\"],\n    \"advance_payment_required\": false,\n    \"cancellation_policy\": \"24_hours_notice\",\n    \"refund_policy\": \"full_refund_24hrs_advance\"\n  },\n  \"patient_communication\": {\n    \"allow_direct_messages\": true,\n    \"response_time_hours\": 24,\n    \"emergency_contact_method\": \"phone\",\n    \"after_hours_availability\": false\n  }\n}"
						},
						"url": {
							"raw": "{{backend_url}}/users/doctor/consultation-settings",
							"host": ["{{backend_url}}"],
							"path": ["users", "doctor", "consultation-settings"]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Consultation settings updated', function () {",
									"    pm.response.to.have.status(200);",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.data).to.have.property('updated_settings');",
									"    pm.expect(jsonData.data.updated_settings.consultation_duration.default_minutes).to.equal(30);",
									"    pm.expect(jsonData.data.updated_settings.online_consultations.enabled).to.be.true;",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "Update Professional Credentials",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{doctor_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"license_information\": {\n    \"license_number\": \"DOC001-UPDATED\",\n    \"license_state\": \"Khartoum State\",\n    \"license_country\": \"Sudan\",\n    \"issue_date\": \"2018-06-15\",\n    \"expiry_date\": \"2025-06-15\",\n    \"licensing_board\": \"Sudan Medical Council\",\n    \"verification_status\": \"verified\"\n  },\n  \"education\": [\n    {\n      \"degree\": \"Doctor of Medicine (MD)\",\n      \"institution\": \"University of Khartoum, Faculty of Medicine\",\n      \"graduation_year\": 2018,\n      \"country\": \"Sudan\"\n    },\n    {\n      \"degree\": \"Residency in Internal Medicine\",\n      \"institution\": \"Khartoum Teaching Hospital\",\n      \"completion_year\": 2021,\n      \"country\": \"Sudan\"\n    }\n  ],\n  \"certifications\": [\n    {\n      \"name\": \"Board Certified Internal Medicine\",\n      \"issuing_organization\": \"Sudan Medical Board\",\n      \"issue_date\": \"2021-08-15\",\n      \"expiry_date\": \"2026-08-15\",\n      \"certificate_number\": \"SBIM-2021-001\"\n    },\n    {\n      \"name\": \"Advanced Cardiac Life Support (ACLS)\",\n      \"issuing_organization\": \"Sudan Heart Association\",\n      \"issue_date\": \"2023-03-10\",\n      \"expiry_date\": \"2025-03-10\",\n      \"certificate_number\": \"ACLS-2023-456\"\n    }\n  ],\n  \"professional_memberships\": [\n    {\n      \"organization\": \"Sudan Medical Association\",\n      \"membership_number\": \"SMA-12345\",\n      \"membership_type\": \"Full Member\",\n      \"join_date\": \"2018-09-01\",\n      \"status\": \"active\"\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{backend_url}}/users/doctor/credentials",
							"host": ["{{backend_url}}"],
							"path": ["users", "doctor", "credentials"]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Professional credentials updated', function () {",
									"    pm.response.to.have.status(200);",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.data).to.have.property('credentials_updated');",
									"    pm.expect(jsonData.data).to.have.property('verification_required');",
									"    pm.expect(jsonData.data.credentials_updated).to.be.true;",
									"});"
								]
							}
						}
					]
				}
			]
		},
		{
			"name": "Error Scenarios & Security",
			"item": [
				{
					"name": "Update Profile Without Authentication",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"full_name\": \"Unauthorized Update\"\n}"
						},
						"url": {
							"raw": "{{backend_url}}/users/profile/basic",
							"host": ["{{backend_url}}"],
							"path": ["users", "profile", "basic"]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Unauthenticated profile update denied', function () {",
									"    pm.response.to.have.status(401);",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.false;",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "Access Another User's Settings",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{patient_token}}"
							}
						],
						"url": {
							"raw": "{{backend_url}}/users/profile?user_id={{doctor_id}}",
							"host": ["{{backend_url}}"],
							"path": ["users", "profile"],
							"query": [
								{
									"key": "user_id",
									"value": "{{doctor_id}}"
								}
							]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Cannot access other user profile', function () {",
									"    // Should only return the authenticated user's profile",
									"    // or return 403 if trying to access specific user_id",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 403]);",
									"    ",
									"    if (pm.response.code === 200) {",
									"        var jsonData = pm.response.json();",
									"        pm.expect(jsonData.success).to.be.true;",
									"        // Should ignore user_id parameter and return current user's profile",
									"    }",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "Invalid Privacy Settings",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{patient_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"data_sharing\": {\n    \"share_with_healthcare_providers\": \"invalid_boolean\",\n    \"share_with_insurance\": \"maybe\"\n  },\n  \"profile_visibility\": {\n    \"show_full_name\": 123\n  }\n}"
						},
						"url": {
							"raw": "{{backend_url}}/users/privacy-settings",
							"host": ["{{backend_url}}"],
							"path": ["users", "privacy-settings"]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Invalid privacy settings rejected', function () {",
									"    pm.response.to.have.status(400);",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.false;",
									"    pm.expect(jsonData).to.have.property('errors');",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "Weak Password Update",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{patient_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"current_password\": \"patient123\",\n  \"new_password\": \"123\",\n  \"confirm_password\": \"123\"\n}"
						},
						"url": {
							"raw": "{{backend_url}}/users/change-password",
							"host": ["{{backend_url}}"],
							"path": ["users", "change-password"]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Weak password rejected', function () {",
									"    pm.response.to.have.status(400);",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.false;",
									"    pm.expect(jsonData.message).to.include('password');",
									"});"
								]
							}
						}
					]
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Ensure required tokens exist",
					"if (!pm.environment.get('patient_token')) {",
					"    console.error('Patient token not found. Please run Authentication tests first.');",
					"}",
					"",
					"if (!pm.environment.get('doctor_token')) {",
					"    console.error('Doctor token not found. Please run Authentication tests first.');",
					"}",
					"",
					"if (!pm.environment.get('admin_token')) {",
					"    console.error('Admin token not found. Please run Authentication tests first.');",
					"}",
					"",
					"if (!pm.environment.get('patient_id')) {",
					"    console.error('Patient ID not found. Please run Authentication tests first.');",
					"}",
					"",
					"if (!pm.environment.get('doctor_id')) {",
					"    console.error('Doctor ID not found. Please run Authentication tests first.');",
					"}"
				]
			}
		}
	]
}